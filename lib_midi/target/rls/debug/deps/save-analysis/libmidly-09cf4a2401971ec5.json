{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1","program":"/home/jun/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","midly","--edition=2018","/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"parallel\"","--cfg","feature=\"rayon\"","--cfg","feature=\"std\"","-C","metadata=09cf4a2401971ec5","-C","extra-filename=-09cf4a2401971ec5","--out-dir","/home/jun/Desktop/Neo_master/Neothesia/lib_midi/target/rls/debug/deps","-L","dependency=/home/jun/Desktop/Neo_master/Neothesia/lib_midi/target/rls/debug/deps","--extern","rayon=/home/jun/Desktop/Neo_master/Neothesia/lib_midi/target/rls/debug/deps/librayon-096127192a22ac03.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/jun/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/jun/Desktop/Neo_master/Neothesia/lib_midi/target/rls/debug/deps/libmidly-09cf4a2401971ec5.rmeta"},"prelude":{"crate_id":{"name":"midly","disambiguator":[14732822267774228999,8017481686774810164]},"crate_root":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src","external_crates":[{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8363989277313806732,13723635736355452392]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","num":2,"id":{"name":"core","disambiguator":[5755871685339259462,14524450630327408145]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6095990061662150844,17257511342173735843]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13534664360101634333,15955848543282431589]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2576337310504802494,7533979301291365915]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5114841071718684731,1147767992231475921]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14891534813972024149,13771932312545804845]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[904103305253144465,12292134317329413205]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[16314738562439622889,10306027504818249940]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15843431334828571128,5286674190927770495]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17405625562201081622,10275716470817790619]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11445955052790897216,5818918092474945162]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[14649202847011715524,6782578055671422766]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[7180995537586922820,7051902941398327739]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[9612987991627917998,10712864082221106628]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[17826240478786457486,5527832178130695808]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6600453779972510942,5977101663316138555]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":18,"id":{"name":"rayon","disambiguator":[7221888509001509489,1556998586013808229]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":19,"id":{"name":"either","disambiguator":[11262356102847295678,16849305329500680]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":20,"id":{"name":"rayon_core","disambiguator":[1604065078583676423,3278230865722443179]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":21,"id":{"name":"crossbeam_channel","disambiguator":[16542759127841388980,10418142222376543732]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":22,"id":{"name":"cfg_if","disambiguator":[1155024563974712189,5296233732488635092]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":23,"id":{"name":"crossbeam_utils","disambiguator":[7195128240694148042,11872690668543043176]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":24,"id":{"name":"lazy_static","disambiguator":[10949373214698449189,8475297847177132521]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":25,"id":{"name":"crossbeam_deque","disambiguator":[16253661829331967514,10199737247788057311]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":26,"id":{"name":"crossbeam_epoch","disambiguator":[5312048144332430509,9515906799757391756]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":27,"id":{"name":"scopeguard","disambiguator":[6205199248654165238,6871896847252225167]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":28,"id":{"name":"memoffset","disambiguator":[6389906395878174188,1233570562074665699]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":29,"id":{"name":"num_cpus","disambiguator":[16163208888758846774,16977376466497103348]}},{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","num":30,"id":{"name":"libc","disambiguator":[9786668764286879902,8023068580845832097]}}],"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":0,"byte_end":7147,"line_start":1,"line_end":240,"column_start":1,"column_end":10}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1736},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131268,"byte_end":131281,"line_start":286,"line_end":286,"column_start":33,"column_end":46},"alias_span":null,"name":"DefaultBuffer","value":"","parent":{"krate":0,"index":540}},{"kind":"Use","ref_id":{"krate":0,"index":431},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6604,"byte_end":6613,"line_start":221,"line_end":221,"column_start":21,"column_end":30},"alias_span":null,"name":"write_std","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":645},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6669,"byte_end":6674,"line_start":224,"line_end":224,"column_start":12,"column_end":17},"alias_span":null,"name":"Arena","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":402},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6686,"byte_end":6701,"line_start":225,"line_end":225,"column_start":11,"column_end":26},"alias_span":null,"name":"BytemappedTrack","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1574},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6703,"byte_end":6706,"line_start":225,"line_end":225,"column_start":28,"column_end":31},"alias_span":null,"name":"Smf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1599},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6708,"byte_end":6718,"line_start":225,"line_end":225,"column_start":33,"column_end":43},"alias_span":null,"name":"SmfBytemap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":389},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6720,"byte_end":6725,"line_start":225,"line_end":225,"column_start":45,"column_end":50},"alias_span":null,"name":"Track","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":629},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6760,"byte_end":6765,"line_start":228,"line_end":228,"column_start":13,"column_end":18},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":633},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6767,"byte_end":6776,"line_start":228,"line_end":228,"column_start":20,"column_end":29},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":52},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6778,"byte_end":6784,"line_start":228,"line_end":228,"column_start":31,"column_end":37},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":778},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6799,"byte_end":6810,"line_start":229,"line_end":229,"column_start":13,"column_end":24},"alias_span":null,"name":"MetaMessage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":724},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6812,"byte_end":6823,"line_start":229,"line_end":229,"column_start":26,"column_end":37},"alias_span":null,"name":"MidiMessage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":760},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6825,"byte_end":6834,"line_start":229,"line_end":229,"column_start":39,"column_end":48},"alias_span":null,"name":"PitchBend","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":761},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6825,"byte_end":6834,"line_start":229,"line_end":229,"column_start":39,"column_end":48},"alias_span":null,"name":"PitchBend","value":"","parent":{"krate":0,"index":599}},{"kind":"Use","ref_id":{"krate":0,"index":649},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6836,"byte_end":6846,"line_start":229,"line_end":229,"column_start":50,"column_end":60},"alias_span":null,"name":"TrackEvent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":680},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6848,"byte_end":6862,"line_start":229,"line_end":229,"column_start":62,"column_end":76},"alias_span":null,"name":"TrackEventKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1475},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6881,"byte_end":6887,"line_start":230,"line_end":230,"column_start":17,"column_end":23},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1546},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6889,"byte_end":6892,"line_start":230,"line_end":230,"column_start":25,"column_end":28},"alias_span":null,"name":"Fps","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1522},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6894,"byte_end":6903,"line_start":230,"line_end":230,"column_start":30,"column_end":39},"alias_span":null,"name":"SmpteTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1497},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6905,"byte_end":6911,"line_start":230,"line_end":230,"column_start":41,"column_end":47},"alias_span":null,"name":"Timing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":420},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6924,"byte_end":6929,"line_start":231,"line_end":231,"column_start":11,"column_end":16},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":421},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6931,"byte_end":6936,"line_start":231,"line_end":231,"column_start":18,"column_end":23},"alias_span":null,"name":"write","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1714},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6938,"byte_end":6954,"line_start":231,"line_end":231,"column_start":25,"column_end":41},"alias_span":null,"name":"EventBytemapIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1705},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6956,"byte_end":6965,"line_start":231,"line_end":231,"column_start":43,"column_end":52},"alias_span":null,"name":"EventIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1659},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6967,"byte_end":6973,"line_start":231,"line_end":231,"column_start":54,"column_end":60},"alias_span":null,"name":"Header","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1677},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6975,"byte_end":6984,"line_start":231,"line_end":231,"column_start":62,"column_end":71},"alias_span":null,"name":"TrackIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1157},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":7093,"byte_end":7096,"line_start":236,"line_end":236,"column_start":32,"column_end":35},"alias_span":null,"name":"u14","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":1101},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":7098,"byte_end":7101,"line_start":236,"line_end":236,"column_start":37,"column_end":40},"alias_span":null,"name":"u15","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":1388},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":7103,"byte_end":7106,"line_start":236,"line_end":236,"column_start":42,"column_end":45},"alias_span":null,"name":"u24","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":1442},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":7108,"byte_end":7111,"line_start":236,"line_end":236,"column_start":47,"column_end":50},"alias_span":null,"name":"u28","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":1276},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":7113,"byte_end":7115,"line_start":236,"line_end":236,"column_start":52,"column_end":54},"alias_span":null,"name":"u4","value":"","parent":{"krate":0,"index":614}},{"kind":"Use","ref_id":{"krate":0,"index":1220},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":7117,"byte_end":7119,"line_start":236,"line_end":236,"column_start":56,"column_end":58},"alias_span":null,"name":"u7","value":"","parent":{"krate":0,"index":614}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":0,"byte_end":7147,"line_start":1,"line_end":240,"column_start":1,"column_end":10},"name":"","qualname":"::","value":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":55},{"krate":0,"index":91},{"krate":0,"index":115},{"krate":0,"index":167},{"krate":0,"index":271},{"krate":0,"index":309},{"krate":0,"index":363},{"krate":0,"index":378},{"krate":0,"index":540},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":1865},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[{"value":"/ # Overview","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ `midly` is a full-featured MIDI parser and writer, focused on performance.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":19,"byte_end":97,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":98,"byte_end":101,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Parsing a `.mid` file can be as simple as:","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":102,"byte_end":148,"line_start":5,"line_end":5,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":149,"byte_end":152,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":153,"byte_end":164,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(feature = \"alloc\")] {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":165,"byte_end":198,"line_start":8,"line_end":8,"column_start":1,"column_end":34}},{"value":"/ use midly::Smf;","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":199,"byte_end":218,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":219,"byte_end":222,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ let smf = Smf::parse(include_bytes!(\"../test-asset/Clementi.mid\")).unwrap();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":223,"byte_end":303,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":304,"byte_end":307,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ for (i, track) in smf.tracks.iter().enumerate() {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":308,"byte_end":361,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"/     println!(\"track {} has {} events\", i, track.len());","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":362,"byte_end":421,"line_start":14,"line_end":14,"column_start":1,"column_end":60}},{"value":"/ }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":422,"byte_end":427,"line_start":15,"line_end":15,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":428,"byte_end":435,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":436,"byte_end":443,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":444,"byte_end":447,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Parsing Standard Midi Files (`.mid` files)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":448,"byte_end":496,"line_start":19,"line_end":19,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":497,"byte_end":500,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Parsing Standard Midi Files is usually done through the [`Smf`](struct.Smf.html) struct (or if","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":501,"byte_end":599,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ working in a `no_std` environment without an allocator, through the [`parse`](fn.parse.html)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":600,"byte_end":696,"line_start":22,"line_end":22,"column_start":1,"column_end":97}},{"value":"/ function).","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":697,"byte_end":711,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":712,"byte_end":715,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Note that most types in this crate have a lifetime parameter, because they reference the bytes","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":716,"byte_end":814,"line_start":25,"line_end":25,"column_start":1,"column_end":99}},{"value":"/ in the original file (in order to avoid allocations).","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":815,"byte_end":872,"line_start":26,"line_end":26,"column_start":1,"column_end":58}},{"value":"/ For this reason, reading a file and parsing it must be done in two separate steps:","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":873,"byte_end":959,"line_start":27,"line_end":27,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":960,"byte_end":963,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":964,"byte_end":975,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(feature = \"alloc\")] {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":976,"byte_end":1009,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"/ use std::fs;","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1010,"byte_end":1026,"line_start":31,"line_end":31,"column_start":1,"column_end":17}},{"value":"/ use midly::Smf;","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1027,"byte_end":1046,"line_start":32,"line_end":32,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1047,"byte_end":1050,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ // Load bytes into a buffer","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1051,"byte_end":1082,"line_start":34,"line_end":34,"column_start":1,"column_end":32}},{"value":"/ let bytes = fs::read(\"test-asset/Clementi.mid\").unwrap();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1083,"byte_end":1144,"line_start":35,"line_end":35,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1145,"byte_end":1148,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // Parse bytes in a separate step","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1149,"byte_end":1186,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/ let smf = Smf::parse(&bytes).unwrap();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1187,"byte_end":1229,"line_start":38,"line_end":38,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1230,"byte_end":1237,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1238,"byte_end":1245,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1246,"byte_end":1249,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Writing Standard Midi Files","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1250,"byte_end":1283,"line_start":42,"line_end":42,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1284,"byte_end":1287,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Saving `.mid` files is as simple as using the `Smf::save` method:","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1288,"byte_end":1357,"line_start":44,"line_end":44,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1358,"byte_end":1361,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1362,"byte_end":1373,"line_start":46,"line_end":46,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1374,"byte_end":1405,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/ # use std::fs;","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1406,"byte_end":1424,"line_start":48,"line_end":48,"column_start":1,"column_end":19}},{"value":"/ # use midly::Smf;","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1425,"byte_end":1446,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/ // Parse file","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1447,"byte_end":1464,"line_start":50,"line_end":50,"column_start":1,"column_end":18}},{"value":"/ let bytes = fs::read(\"test-asset/Clementi.mid\").unwrap();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1465,"byte_end":1526,"line_start":51,"line_end":51,"column_start":1,"column_end":62}},{"value":"/ let smf = Smf::parse(&bytes).unwrap();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1527,"byte_end":1569,"line_start":52,"line_end":52,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1570,"byte_end":1573,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Rewrite file","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1574,"byte_end":1593,"line_start":54,"line_end":54,"column_start":1,"column_end":20}},{"value":"/ smf.save(\"test-asset/ClementiRewritten.mid\").unwrap();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1594,"byte_end":1652,"line_start":55,"line_end":55,"column_start":1,"column_end":59}},{"value":"/ # }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1653,"byte_end":1660,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1661,"byte_end":1668,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1669,"byte_end":1672,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ SMF files can also be written to an arbitrary writer:","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1673,"byte_end":1730,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1731,"byte_end":1734,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1735,"byte_end":1746,"line_start":61,"line_end":61,"column_start":1,"column_end":12}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1747,"byte_end":1778,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ # use std::fs;","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1779,"byte_end":1797,"line_start":63,"line_end":63,"column_start":1,"column_end":19}},{"value":"/ # use midly::Smf;","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1798,"byte_end":1819,"line_start":64,"line_end":64,"column_start":1,"column_end":22}},{"value":"/ # let bytes = fs::read(\"test-asset/Clementi.mid\").unwrap();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1820,"byte_end":1883,"line_start":65,"line_end":65,"column_start":1,"column_end":64}},{"value":"/ # let smf = Smf::parse(&bytes).unwrap();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1884,"byte_end":1928,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ let mut in_memory = Vec::new();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1929,"byte_end":1964,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ smf.write(&mut in_memory).unwrap();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":1965,"byte_end":2004,"line_start":68,"line_end":68,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2005,"byte_end":2008,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ println!(\"midi file fits in {} bytes!\", in_memory.len());","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2009,"byte_end":2070,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/ # }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2071,"byte_end":2078,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2079,"byte_end":2086,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2087,"byte_end":2090,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Parsing standalone MIDI messages","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2091,"byte_end":2129,"line_start":74,"line_end":74,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2130,"byte_end":2133,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ When using an OS API such as [`midir`](https://docs.rs/midir),","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2134,"byte_end":2200,"line_start":76,"line_end":76,"column_start":1,"column_end":67}},{"value":"/ [`LiveEvent`](live/enum.LiveEvent.html) can be used to parse the raw MIDI bytes:","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2201,"byte_end":2285,"line_start":77,"line_end":77,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2286,"byte_end":2289,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2290,"byte_end":2301,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ use midly::{live::LiveEvent, MidiMessage};","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2302,"byte_end":2348,"line_start":80,"line_end":80,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2349,"byte_end":2352,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ fn on_midi(event: &[u8]) {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2353,"byte_end":2383,"line_start":82,"line_end":82,"column_start":1,"column_end":31}},{"value":"/     let event = LiveEvent::parse(event).unwrap();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2384,"byte_end":2437,"line_start":83,"line_end":83,"column_start":1,"column_end":54}},{"value":"/     match event {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2438,"byte_end":2459,"line_start":84,"line_end":84,"column_start":1,"column_end":22}},{"value":"/         LiveEvent::Midi { channel, message } => match message {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2460,"byte_end":2527,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/             MidiMessage::NoteOn { key, vel } => {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2528,"byte_end":2581,"line_start":86,"line_end":86,"column_start":1,"column_end":54}},{"value":"/                 println!(\"hit note {} on channel {}\", key, channel);","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2582,"byte_end":2654,"line_start":87,"line_end":87,"column_start":1,"column_end":73}},{"value":"/             }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2655,"byte_end":2672,"line_start":88,"line_end":88,"column_start":1,"column_end":18}},{"value":"/             _ => {}","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2673,"byte_end":2696,"line_start":89,"line_end":89,"column_start":1,"column_end":24}},{"value":"/         },","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2697,"byte_end":2711,"line_start":90,"line_end":90,"column_start":1,"column_end":15}},{"value":"/         _ => {}","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2712,"byte_end":2731,"line_start":91,"line_end":91,"column_start":1,"column_end":20}},{"value":"/     }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2732,"byte_end":2741,"line_start":92,"line_end":92,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2742,"byte_end":2747,"line_start":93,"line_end":93,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2748,"byte_end":2755,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2756,"byte_end":2759,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ # Writing standalone MIDI messages","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2760,"byte_end":2798,"line_start":96,"line_end":96,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2799,"byte_end":2802,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ Raw MIDI message bytes can be produced for consumption by OS APIs, such as","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2803,"byte_end":2881,"line_start":98,"line_end":98,"column_start":1,"column_end":79}},{"value":"/ [`midir`](https://docs.rs/midir), through the","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2882,"byte_end":2931,"line_start":99,"line_end":99,"column_start":1,"column_end":50}},{"value":"/ [`LiveEvent::write`](live/enum.LiveEvent.html#method.write) method:","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":2932,"byte_end":3003,"line_start":100,"line_end":100,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3004,"byte_end":3007,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3008,"byte_end":3019,"line_start":102,"line_end":102,"column_start":1,"column_end":12}},{"value":"/ use midly::{live::LiveEvent, MidiMessage};","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3020,"byte_end":3066,"line_start":103,"line_end":103,"column_start":1,"column_end":47}},{"value":"/ # fn write_midi(bytes: &[u8]) {}","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3067,"byte_end":3103,"line_start":104,"line_end":104,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3104,"byte_end":3107,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ fn note_on(channel: u8, key: u8) {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3108,"byte_end":3146,"line_start":106,"line_end":106,"column_start":1,"column_end":39}},{"value":"/     let ev = LiveEvent::Midi {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3147,"byte_end":3181,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"/         channel: channel.into(),","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3182,"byte_end":3218,"line_start":108,"line_end":108,"column_start":1,"column_end":37}},{"value":"/         message: MidiMessage::NoteOn {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3219,"byte_end":3261,"line_start":109,"line_end":109,"column_start":1,"column_end":43}},{"value":"/             key: key.into(),","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3262,"byte_end":3294,"line_start":110,"line_end":110,"column_start":1,"column_end":33}},{"value":"/             vel: 127.into(),","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3295,"byte_end":3327,"line_start":111,"line_end":111,"column_start":1,"column_end":33}},{"value":"/         },","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3328,"byte_end":3342,"line_start":112,"line_end":112,"column_start":1,"column_end":15}},{"value":"/     };","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3343,"byte_end":3353,"line_start":113,"line_end":113,"column_start":1,"column_end":11}},{"value":"/ #   let mut stack_buf = [0; 3];","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3354,"byte_end":3389,"line_start":114,"line_end":114,"column_start":1,"column_end":36}},{"value":"/ #   let mut buf = {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3390,"byte_end":3413,"line_start":115,"line_end":115,"column_start":1,"column_end":24}},{"value":"/ #       #[cfg(feature = \"alloc\")] {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3414,"byte_end":3453,"line_start":116,"line_end":116,"column_start":1,"column_end":40}},{"value":"/     let mut buf = Vec::new();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3454,"byte_end":3487,"line_start":117,"line_end":117,"column_start":1,"column_end":34}},{"value":"/ #           buf","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3488,"byte_end":3507,"line_start":118,"line_end":118,"column_start":1,"column_end":20}},{"value":"/ #       }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3508,"byte_end":3521,"line_start":119,"line_end":119,"column_start":1,"column_end":14}},{"value":"/ #       #[cfg(not(feature = \"alloc\"))] {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3522,"byte_end":3566,"line_start":120,"line_end":120,"column_start":1,"column_end":45}},{"value":"/ #           &mut stack_buf[..]","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3567,"byte_end":3601,"line_start":121,"line_end":121,"column_start":1,"column_end":35}},{"value":"/ #       }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3602,"byte_end":3615,"line_start":122,"line_end":122,"column_start":1,"column_end":14}},{"value":"/ #   };","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3616,"byte_end":3626,"line_start":123,"line_end":123,"column_start":1,"column_end":11}},{"value":"/     ev.write(&mut buf).unwrap();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3627,"byte_end":3663,"line_start":124,"line_end":124,"column_start":1,"column_end":37}},{"value":"/     write_midi(&buf[..]);","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3664,"byte_end":3693,"line_start":125,"line_end":125,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3694,"byte_end":3699,"line_start":126,"line_end":126,"column_start":1,"column_end":6}},{"value":"/ # note_on(3, 61); note_on(2, 50); note_on(2,61);","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3700,"byte_end":3752,"line_start":127,"line_end":127,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3753,"byte_end":3760,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3761,"byte_end":3764,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ # About features","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3765,"byte_end":3785,"line_start":130,"line_end":130,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3786,"byte_end":3789,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ The following cargo features are available to enable or disable parts of the crate:","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3790,"byte_end":3877,"line_start":132,"line_end":132,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3878,"byte_end":3881,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ - `parallel` (enabled by default)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3882,"byte_end":3919,"line_start":134,"line_end":134,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3920,"byte_end":3923,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/   This feature enables the use of multiple threads when parsing large midi files.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":3924,"byte_end":4009,"line_start":136,"line_end":136,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4010,"byte_end":4013,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/   Disabling this feature will remove the dependency on `rayon`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4014,"byte_end":4081,"line_start":138,"line_end":138,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4082,"byte_end":4085,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ - `std` (enabled by default)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4086,"byte_end":4118,"line_start":140,"line_end":140,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4119,"byte_end":4122,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/   This feature enables integration with `std`, for example implementing `std::error::Error` for","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4123,"byte_end":4222,"line_start":142,"line_end":142,"column_start":1,"column_end":100}},{"value":"/   [`midly::Error`](struct.Error.html), support for writing to `std::io::Write` streams, among","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4223,"byte_end":4320,"line_start":143,"line_end":143,"column_start":1,"column_end":98}},{"value":"/   others.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4321,"byte_end":4334,"line_start":144,"line_end":144,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4335,"byte_end":4338,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/   Disabling this feature will make the crate `no_std`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4339,"byte_end":4397,"line_start":146,"line_end":146,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4398,"byte_end":4401,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ - `alloc` (enabled by default)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4402,"byte_end":4436,"line_start":148,"line_end":148,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4437,"byte_end":4440,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/   This feature enables allocations both for ergonomics and performance.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4441,"byte_end":4516,"line_start":150,"line_end":150,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4517,"byte_end":4520,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/   Disabling both the `std` and the `alloc` feature will make the crate fully `no_std`, but will","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4521,"byte_end":4620,"line_start":152,"line_end":152,"column_start":1,"column_end":100}},{"value":"/   reduce functionality to a minimum.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4621,"byte_end":4661,"line_start":153,"line_end":153,"column_start":1,"column_end":41}},{"value":"/   For example, the [`Smf`](struct.Smf.html) type is unavailable without the `alloc` feature.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4662,"byte_end":4758,"line_start":154,"line_end":154,"column_start":1,"column_end":97}},{"value":"/   All types that are unavailable when a feature is disabled are marked as such in their","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4759,"byte_end":4850,"line_start":155,"line_end":155,"column_start":1,"column_end":92}},{"value":"/   documentation.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4851,"byte_end":4871,"line_start":156,"line_end":156,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4872,"byte_end":4875,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ - `strict`","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4876,"byte_end":4890,"line_start":158,"line_end":158,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4891,"byte_end":4894,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/   By default `midly` will attempt to plow through non-standard and even obviously corrupted","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4895,"byte_end":4990,"line_start":160,"line_end":160,"column_start":1,"column_end":96}},{"value":"/   files, throwing away any unreadable data, or even entire tracks in the worst scenario.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":4991,"byte_end":5083,"line_start":161,"line_end":161,"column_start":1,"column_end":93}},{"value":"/   By enabling the `strict` feature the parser will reject uncompliant data and do","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":5084,"byte_end":5169,"line_start":162,"line_end":162,"column_start":1,"column_end":86}},{"value":"/   additional checking, throwing errors of the kind","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":5170,"byte_end":5224,"line_start":163,"line_end":163,"column_start":1,"column_end":55}},{"value":"/   [`ErrorKind::Malformed`](enum.ErrorKind.html#variant.Malformed) when such a situation arises.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":5225,"byte_end":5324,"line_start":164,"line_end":164,"column_start":1,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":629},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9643,"byte_end":9648,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":630}],"decl_id":null,"docs":" Represents an error while parsing an SMF file or MIDI stream.","sig":null,"attributes":[{"value":"/ Represents an error while parsing an SMF file or MIDI stream.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":8995,"byte_end":9060,"line_start":76,"line_end":76,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9061,"byte_end":9064,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This type wraps an `ErrorKind` and includes backtrace and error chain data in debug mode.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9065,"byte_end":9158,"line_start":78,"line_end":78,"column_start":1,"column_end":94}},{"value":"/ In release mode it is a newtype wrapper around `ErrorKind`, so the `Error::source` method","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9159,"byte_end":9252,"line_start":79,"line_end":79,"column_start":1,"column_end":94}},{"value":"/ always returns `None`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9253,"byte_end":9279,"line_start":80,"line_end":80,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9280,"byte_end":9283,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ If the `std` feature is enabled, this type implements `std::error::Error`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9284,"byte_end":9362,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ Otherwise, only `Display` and `Debug` are implemented (the `source` method on the `Error` type","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9363,"byte_end":9461,"line_start":83,"line_end":83,"column_start":1,"column_end":99}},{"value":"/ itself is still available, though).","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9462,"byte_end":9501,"line_start":84,"line_end":84,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9502,"byte_end":9505,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ For more information about the error policy used by `midly`, see","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9506,"byte_end":9574,"line_start":86,"line_end":86,"column_start":1,"column_end":69}},{"value":"/ [`ErrorKind`](enum.ErrorKind.html).","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9575,"byte_end":9614,"line_start":87,"line_end":87,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9787,"byte_end":9790,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"pub fn new(&'static ErrorKind) -> Error","parent":null,"children":[],"decl_id":null,"docs":" Create a new error with the given `ErrorKind`.\n","sig":null,"attributes":[{"value":"/ Create a new error with the given `ErrorKind`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9711,"byte_end":9761,"line_start":93,"line_end":93,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9766,"byte_end":9775,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9935,"byte_end":9939,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"pub fn kind(&Self) -> ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" More information about the error itself.\n","sig":null,"attributes":[{"value":"/ More information about the error itself.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9865,"byte_end":9909,"line_start":99,"line_end":99,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9914,"byte_end":9923,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10287,"byte_end":10293,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"source","qualname":"<Error>::source","value":"pub fn source(&Self) -> Option<&Error>","parent":null,"children":[],"decl_id":null,"docs":" The underlying cause for this error.","sig":null,"attributes":[{"value":"/ The underlying cause for this error.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10002,"byte_end":10042,"line_start":105,"line_end":105,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10047,"byte_end":10050,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Note that this method will always return `None` in release mode, since error chains","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10055,"byte_end":10142,"line_start":107,"line_end":107,"column_start":5,"column_end":92}},{"value":"/ are not tracked in release.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10147,"byte_end":10178,"line_start":108,"line_end":108,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10183,"byte_end":10186,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ This method is available even if the `std` feature is not enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10191,"byte_end":10261,"line_start":110,"line_end":110,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10266,"byte_end":10275,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":634},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11915,"byte_end":11922,"line_start":162,"line_end":162,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::error::ErrorKind::Invalid","value":"ErrorKind::Invalid(&'static str)","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Fatal errors while reading the file. It is likely that the file is not a MIDI file or\n is severely corrupted.","sig":null,"attributes":[{"value":"/ Fatal errors while reading the file. It is likely that the file is not a MIDI file or","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11639,"byte_end":11728,"line_start":157,"line_end":157,"column_start":5,"column_end":94}},{"value":"/ is severely corrupted.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11733,"byte_end":11759,"line_start":158,"line_end":158,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11764,"byte_end":11767,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This error cannot be ignored, as there is not enough data to continue parsing.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11772,"byte_end":11854,"line_start":160,"line_end":160,"column_start":5,"column_end":87}},{"value":"/ No information about the file could be rescued.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11859,"byte_end":11910,"line_start":161,"line_end":161,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":637},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12242,"byte_end":12251,"line_start":171,"line_end":171,"column_start":5,"column_end":14},"name":"Malformed","qualname":"::error::ErrorKind::Malformed","value":"ErrorKind::Malformed(&'static str)","parent":{"krate":0,"index":633},"children":[],"decl_id":null,"docs":" Non-fatal error, but the file is clearly corrupted.","sig":null,"attributes":[{"value":"/ Non-fatal error, but the file is clearly corrupted.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11943,"byte_end":11998,"line_start":164,"line_end":164,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12003,"byte_end":12006,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ This kind of error is not emitted by default, only if the `strict` crate feature is","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12011,"byte_end":12098,"line_start":166,"line_end":166,"column_start":5,"column_end":92}},{"value":"/ enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12103,"byte_end":12115,"line_start":167,"line_end":167,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12120,"byte_end":12123,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Ignoring these errors (if the `strict` feature is disabled) can cause whole tracks to be","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12128,"byte_end":12220,"line_start":169,"line_end":169,"column_start":5,"column_end":97}},{"value":"/ dropped.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12225,"byte_end":12237,"line_start":170,"line_end":170,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":633},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11623,"byte_end":11632,"line_start":156,"line_end":156,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"pub enum ErrorKind {\n\n    /// Fatal errors while reading the file. It is likely that the file is not a MIDI file or\n    /// is severely corrupted.\n    ///\n    /// This error cannot be ignored, as there is not enough data to continue parsing.\n    /// No information about the file could be rescued.\n    Invalid(&'static str),\n\n    /// Non-fatal error, but the file is clearly corrupted.\n    ///\n    /// This kind of error is not emitted by default, only if the `strict` crate feature is\n    /// enabled.\n    ///\n    /// Ignoring these errors (if the `strict` feature is disabled) can cause whole tracks to be\n    /// dropped.\n    Malformed(&'static str),\n}","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":637}],"decl_id":null,"docs":" The type of error that occurred while parsing.","sig":null,"attributes":[{"value":"/ The type of error that occurred while parsing.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11263,"byte_end":11313,"line_start":149,"line_end":149,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11314,"byte_end":11317,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ As a library consumer, detailed errors about what specific part of the MIDI spec was","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11318,"byte_end":11406,"line_start":151,"line_end":151,"column_start":1,"column_end":89}},{"value":"/ violated are not very useful.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11407,"byte_end":11440,"line_start":152,"line_end":152,"column_start":1,"column_end":34}},{"value":"/ For this reason, errors are broadly categorized into 2 classes, and specific error info is","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11441,"byte_end":11535,"line_start":153,"line_end":153,"column_start":1,"column_end":95}},{"value":"/ provided as a non-normative string literal.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":11536,"byte_end":11583,"line_start":154,"line_end":154,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12404,"byte_end":12411,"line_start":176,"line_end":176,"column_start":12,"column_end":19},"name":"message","qualname":"<ErrorKind>::message","value":"pub fn message(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Get the informative message on what exact part of the MIDI format was not respected.\n","sig":null,"attributes":[{"value":"/ Get the informative message on what exact part of the MIDI format was not respected.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12290,"byte_end":12378,"line_start":174,"line_end":174,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12383,"byte_end":12392,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":52},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":13736,"byte_end":13742,"line_start":223,"line_end":223,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"StdResult<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" The result type used by the MIDI parser.\n","sig":null,"attributes":[{"value":"/ The result type used by the MIDI parser.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":13682,"byte_end":13726,"line_start":222,"line_end":222,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":645},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15406,"byte_end":15411,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"Arena","qualname":"::arena::Arena","value":"Arena {  }","parent":null,"children":[{"krate":0,"index":646}],"decl_id":null,"docs":" Helps overcome limitations of the lifetime system when constructing MIDI events and files.","sig":null,"attributes":[{"value":"/ Helps overcome limitations of the lifetime system when constructing MIDI events and files.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":13900,"byte_end":13994,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":13995,"byte_end":13998,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Because many events contain references to data that outlives them, it can be hard to build a","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":13999,"byte_end":14095,"line_start":8,"line_end":8,"column_start":1,"column_end":97}},{"value":"/ MIDI file programatically.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14096,"byte_end":14126,"line_start":9,"line_end":9,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14127,"byte_end":14130,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Consider the following code:","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14131,"byte_end":14163,"line_start":11,"line_end":11,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14164,"byte_end":14167,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14168,"byte_end":14192,"line_start":13,"line_end":13,"column_start":1,"column_end":25}},{"value":"/ use midly::{TrackEvent, TrackEventKind, MetaMessage};","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14193,"byte_end":14250,"line_start":14,"line_end":14,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14251,"byte_end":14254,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ let mut track = Vec::new();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14255,"byte_end":14286,"line_start":16,"line_end":16,"column_start":1,"column_end":32}},{"value":"/ for i in 0..64 {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14287,"byte_end":14307,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"/     let marker_name = format!(\"Marker {}\", i);","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14308,"byte_end":14358,"line_start":18,"line_end":18,"column_start":1,"column_end":51}},{"value":"/     let marker_ref = marker_name.as_bytes();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14359,"byte_end":14407,"line_start":19,"line_end":19,"column_start":1,"column_end":49}},{"value":"/     track.push(TrackEvent {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14408,"byte_end":14439,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/         delta: 0.into(),","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14440,"byte_end":14468,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/         kind: TrackEventKind::Meta(MetaMessage::Marker(marker_ref)),","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14469,"byte_end":14541,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/     });","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14542,"byte_end":14553,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14554,"byte_end":14559,"line_start":24,"line_end":24,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14560,"byte_end":14567,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14568,"byte_end":14571,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Looks pretty good, but it fails to compile with","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14572,"byte_end":14623,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"/ `error[E0597]: \"marker_name\" does not live long enough`, with a rightful reason: `marker_name`","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14624,"byte_end":14722,"line_start":28,"line_end":28,"column_start":1,"column_end":99}},{"value":"/ is dropped before the next iteration of the `for` loop.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14723,"byte_end":14782,"line_start":29,"line_end":29,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14783,"byte_end":14786,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Instead, use the [`Arena`](struct.Arena.html) type like the following code:","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14787,"byte_end":14866,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14867,"byte_end":14870,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14871,"byte_end":14882,"line_start":33,"line_end":33,"column_start":1,"column_end":12}},{"value":"/ use midly::{TrackEvent, TrackEventKind, MetaMessage};","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14883,"byte_end":14940,"line_start":34,"line_end":34,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14941,"byte_end":14944,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ let arena = midly::Arena::new();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14945,"byte_end":14981,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/ let mut track = Vec::new();","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":14982,"byte_end":15013,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/ for i in 0..64 {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15014,"byte_end":15034,"line_start":38,"line_end":38,"column_start":1,"column_end":21}},{"value":"/     let marker_name = format!(\"Marker {}\", i);","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15035,"byte_end":15085,"line_start":39,"line_end":39,"column_start":1,"column_end":51}},{"value":"/     let marker_ref = arena.add(marker_name.as_bytes());","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15086,"byte_end":15145,"line_start":40,"line_end":40,"column_start":1,"column_end":60}},{"value":"/     track.push(TrackEvent {","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15146,"byte_end":15177,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/         delta: 0.into(),","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15178,"byte_end":15206,"line_start":42,"line_end":42,"column_start":1,"column_end":29}},{"value":"/         kind: TrackEventKind::Meta(MetaMessage::Marker(marker_ref)),","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15207,"byte_end":15279,"line_start":43,"line_end":43,"column_start":1,"column_end":73}},{"value":"/     });","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15280,"byte_end":15291,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15292,"byte_end":15297,"line_start":45,"line_end":45,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15298,"byte_end":15305,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15306,"byte_end":15309,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ This type is only available with the `alloc` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15310,"byte_end":15375,"line_start":48,"line_end":48,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15533,"byte_end":15536,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<Arena>::new","value":"pub fn new() -> Arena","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty arena.\n","sig":null,"attributes":[{"value":"/ Create a new empty arena.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15478,"byte_end":15507,"line_start":54,"line_end":54,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15512,"byte_end":15521,"line_start":55,"line_end":55,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15747,"byte_end":15752,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"clear","qualname":"<Arena>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Empty this arena, deallocating all added bytes.","sig":null,"attributes":[{"value":"/ Empty this arena, deallocating all added bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15585,"byte_end":15636,"line_start":60,"line_end":60,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15641,"byte_end":15644,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This method is safe to call because it requires a mutable reference.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15649,"byte_end":15721,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15726,"byte_end":15735,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":16283,"byte_end":16286,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"len","qualname":"<Arena>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the amount of allocations in the arena.\n","sig":null,"attributes":[{"value":"/ Get the amount of allocations in the arena.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":16210,"byte_end":16257,"line_start":76,"line_end":76,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":16262,"byte_end":16271,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":16790,"byte_end":16793,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"add","qualname":"<Arena>::add","value":"pub fn add<'a, 'b>(&'a Self, &'b [u8]) -> &'a mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Add a set of bytes to the arena, returning a longer-lived mutable reference to a copy of\n these same bytes.\n","sig":null,"attributes":[{"value":"/ Add a set of bytes to the arena, returning a longer-lived mutable reference to a copy of","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":16646,"byte_end":16738,"line_start":86,"line_end":86,"column_start":5,"column_end":97}},{"value":"/ these same bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":16743,"byte_end":16764,"line_start":87,"line_end":87,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":16769,"byte_end":16778,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17107,"byte_end":17114,"line_start":97,"line_end":97,"column_start":12,"column_end":19},"name":"add_vec","qualname":"<Arena>::add_vec","value":"pub fn add_vec<'a>(&'a Self, Vec<u8>) -> &'a mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Add a `Vec<u8>` to the arena, returning a long-lived mutable reference to its contents.","sig":null,"attributes":[{"value":"/ Add a `Vec<u8>` to the arena, returning a long-lived mutable reference to its contents.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":16899,"byte_end":16990,"line_start":93,"line_end":93,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":16995,"byte_end":16998,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This method is very similar to `add`, but avoids an allocation and a copy.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17003,"byte_end":17081,"line_start":95,"line_end":95,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17086,"byte_end":17095,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17375,"byte_end":17381,"line_start":104,"line_end":104,"column_start":12,"column_end":18},"name":"add_u7","qualname":"<Arena>::add_u7","value":"pub fn add_u7<'a, 'b>(&'a Self, &'b [u7]) -> &'a mut [u7]","parent":null,"children":[],"decl_id":null,"docs":" Add a set of databytes to the arena, returning a longer-lived mutable reference to a copy\n of these same databytes.\n","sig":null,"attributes":[{"value":"/ Add a set of databytes to the arena, returning a longer-lived mutable reference to a copy","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17223,"byte_end":17316,"line_start":101,"line_end":101,"column_start":5,"column_end":98}},{"value":"/ of these same databytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17321,"byte_end":17349,"line_start":102,"line_end":102,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17354,"byte_end":17363,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17934,"byte_end":17944,"line_start":115,"line_end":115,"column_start":12,"column_end":22},"name":"add_u7_vec","qualname":"<Arena>::add_u7_vec","value":"pub fn add_u7_vec<'a>(&'a Self, Vec<u7>) -> &'a mut [u7]","parent":null,"children":[],"decl_id":null,"docs":" Add a `Vec<u7>` to the arena, returning a long-lived mutable reference to its contents.","sig":null,"attributes":[{"value":"/ Add a `Vec<u7>` to the arena, returning a long-lived mutable reference to its contents.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17723,"byte_end":17814,"line_start":111,"line_end":111,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17819,"byte_end":17822,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This method is very similar to `add_u7`, but avoids an allocation and a copy.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17827,"byte_end":17908,"line_start":113,"line_end":113,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":17913,"byte_end":17922,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":649},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":20474,"byte_end":20484,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"TrackEvent","qualname":"::event::TrackEvent","value":"TrackEvent { delta, kind }","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652}],"decl_id":null,"docs":" Represents a parsed SMF track event.","sig":null,"attributes":[{"value":"/ Represents a parsed SMF track event.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":20275,"byte_end":20315,"line_start":9,"line_end":9,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":20316,"byte_end":20319,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Consists of a delta time with respect to the previous event and the actual track event.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":20320,"byte_end":20411,"line_start":11,"line_end":11,"column_start":1,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":651},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":20580,"byte_end":20585,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"delta","qualname":"::event::TrackEvent::delta","value":"primitive::u28","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" How many MIDI ticks after the previous event should this event fire off.\n","sig":null,"attributes":[{"value":"/ How many MIDI ticks after the previous event should this event fire off.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":20495,"byte_end":20571,"line_start":14,"line_end":14,"column_start":5,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":652},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":20658,"byte_end":20662,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"name":"kind","qualname":"::event::TrackEvent::kind","value":"event::TrackEventKind<'a>","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" The type of event along with event-specific data.\n","sig":null,"attributes":[{"value":"/ The type of event along with event-specific data.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":20596,"byte_end":20649,"line_start":16,"line_end":16,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":682},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22432,"byte_end":22436,"line_start":67,"line_end":67,"column_start":5,"column_end":9},"name":"Midi","qualname":"::event::TrackEventKind::Midi","value":"TrackEventKind::Midi { channel, message }","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":" A message associated to a MIDI channel carrying musical data.","sig":null,"attributes":[{"value":"/ A message associated to a MIDI channel carrying musical data.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22288,"byte_end":22353,"line_start":64,"line_end":64,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22358,"byte_end":22361,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Usually, the bulk of MIDI data is these kind of messages.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22366,"byte_end":22427,"line_start":66,"line_end":66,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":685},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22820,"byte_end":22825,"line_start":74,"line_end":74,"column_start":5,"column_end":10},"name":"SysEx","qualname":"::event::TrackEventKind::SysEx","value":"TrackEventKind::SysEx(&'a [u8])","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":" A System Exclusive message, carrying arbitrary data.","sig":null,"attributes":[{"value":"/ A System Exclusive message, carrying arbitrary data.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22480,"byte_end":22536,"line_start":68,"line_end":68,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22541,"byte_end":22544,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ The data bytes included here do not include the implicit `0xF0` prefix.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22549,"byte_end":22624,"line_start":70,"line_end":70,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22629,"byte_end":22632,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Usually SysEx events end with an `0xF7` byte, but SysEx events that are split into several","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22637,"byte_end":22731,"line_start":72,"line_end":72,"column_start":5,"column_end":99}},{"value":"/ small packets may only contain the `0xF7` byte in the last packet fragment.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22736,"byte_end":22815,"line_start":73,"line_end":73,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":688},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22926,"byte_end":22932,"line_start":76,"line_end":76,"column_start":5,"column_end":11},"name":"Escape","qualname":"::event::TrackEventKind::Escape","value":"TrackEventKind::Escape(&'a [u8])","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":" An escape sequence, intended to send arbitrary data to the MIDI synthesizer.\n","sig":null,"attributes":[{"value":"/ An escape sequence, intended to send arbitrary data to the MIDI synthesizer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22841,"byte_end":22921,"line_start":75,"line_end":75,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":691},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":23065,"byte_end":23069,"line_start":79,"line_end":79,"column_start":5,"column_end":9},"name":"Meta","qualname":"::event::TrackEventKind::Meta","value":"TrackEventKind::Meta(MetaMessage)","parent":{"krate":0,"index":680},"children":[],"decl_id":null,"docs":" A meta-message, giving extra information for correct playback, like tempo, song name,\n lyrics, etc...\n","sig":null,"attributes":[{"value":"/ A meta-message, giving extra information for correct playback, like tempo, song name,","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22948,"byte_end":23037,"line_start":77,"line_end":77,"column_start":5,"column_end":94}},{"value":"/ lyrics, etc...","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":23042,"byte_end":23060,"line_start":78,"line_end":78,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":680},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22263,"byte_end":22277,"line_start":63,"line_end":63,"column_start":10,"column_end":24},"name":"TrackEventKind","qualname":"::event::TrackEventKind","value":"pub enum TrackEventKind<'a> {\n\n    /// A message associated to a MIDI channel carrying musical data.\n    ///\n    /// Usually, the bulk of MIDI data is these kind of messages.\n    Midi {\n        channel: u4,\n        message: MidiMessage,\n    },\n\n    /// A System Exclusive message, carrying arbitrary data.\n    ///\n    /// The data bytes included here do not include the implicit `0xF0` prefix.\n    ///\n    /// Usually SysEx events end with an `0xF7` byte, but SysEx events that are split into several\n    /// small packets may only contain the `0xF7` byte in the last packet fragment.\n    SysEx(&'a [u8]),\n\n    /// An escape sequence, intended to send arbitrary data to the MIDI synthesizer.\n    Escape(&'a [u8]),\n\n    /// A meta-message, giving extra information for correct playback, like tempo, song name,\n    /// lyrics, etc...\n    Meta(MetaMessage),\n}","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":685},{"krate":0,"index":688},{"krate":0,"index":691}],"decl_id":null,"docs":" Represents the different kinds of SMF events and their associated data.","sig":null,"attributes":[{"value":"/ Represents the different kinds of SMF events and their associated data.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22011,"byte_end":22086,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22087,"byte_end":22090,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ It notably does *not* include the timing of the event; the `TrackEvent` struct is responsible","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22091,"byte_end":22188,"line_start":60,"line_end":60,"column_start":1,"column_end":98}},{"value":"/ for this.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":22189,"byte_end":22202,"line_start":61,"line_end":61,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":27097,"byte_end":27110,"line_start":176,"line_end":176,"column_start":12,"column_end":25},"name":"as_live_event","qualname":"<TrackEventKind>::as_live_event","value":"pub fn as_live_event(&Self) -> Option<LiveEvent>","parent":null,"children":[],"decl_id":null,"docs":" Lossy conversion from a track event to a live event.","sig":null,"attributes":[{"value":"/ Lossy conversion from a track event to a live event.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":26866,"byte_end":26922,"line_start":172,"line_end":172,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":26927,"byte_end":26930,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Only channel MIDI messages and not-split SysEx messages can be converted.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":26935,"byte_end":27012,"line_start":174,"line_end":174,"column_start":5,"column_end":82}},{"value":"/ Meta messages and arbitrary escapes yield `None` when converted.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":27017,"byte_end":27085,"line_start":175,"line_end":175,"column_start":5,"column_end":73}}]},{"kind":"StructVariant","id":{"krate":0,"index":725},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":28260,"byte_end":28267,"line_start":205,"line_end":205,"column_start":5,"column_end":12},"name":"NoteOff","qualname":"::event::MidiMessage::NoteOff","value":"MidiMessage::NoteOff { key, vel }","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Stop playing a note.\n","sig":null,"attributes":[{"value":"/ Stop playing a note.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":28231,"byte_end":28255,"line_start":204,"line_end":204,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":728},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":28443,"byte_end":28449,"line_start":212,"line_end":212,"column_start":5,"column_end":11},"name":"NoteOn","qualname":"::event::MidiMessage::NoteOn","value":"MidiMessage::NoteOn { key, vel }","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Start playing a note.\n","sig":null,"attributes":[{"value":"/ Start playing a note.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":28413,"byte_end":28438,"line_start":211,"line_end":211,"column_start":5,"column_end":30}}]},{"kind":"StructVariant","id":{"krate":0,"index":731},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":28789,"byte_end":28799,"line_start":222,"line_end":222,"column_start":5,"column_end":15},"name":"Aftertouch","qualname":"::event::MidiMessage::Aftertouch","value":"MidiMessage::Aftertouch { key, vel }","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Modify the velocity of a note after it has been played.\n","sig":null,"attributes":[{"value":"/ Modify the velocity of a note after it has been played.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":28725,"byte_end":28784,"line_start":221,"line_end":221,"column_start":5,"column_end":64}}]},{"kind":"StructVariant","id":{"krate":0,"index":734},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":28990,"byte_end":29000,"line_start":229,"line_end":229,"column_start":5,"column_end":15},"name":"Controller","qualname":"::event::MidiMessage::Controller","value":"MidiMessage::Controller { controller, value }","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Modify the value of a MIDI controller.\n","sig":null,"attributes":[{"value":"/ Modify the value of a MIDI controller.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":28943,"byte_end":28985,"line_start":228,"line_end":228,"column_start":5,"column_end":47}}]},{"kind":"StructVariant","id":{"krate":0,"index":737},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":29273,"byte_end":29286,"line_start":238,"line_end":238,"column_start":5,"column_end":18},"name":"ProgramChange","qualname":"::event::MidiMessage::ProgramChange","value":"MidiMessage::ProgramChange { program }","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Change the program (also known as instrument) for a channel.\n","sig":null,"attributes":[{"value":"/ Change the program (also known as instrument) for a channel.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":29204,"byte_end":29268,"line_start":237,"line_end":237,"column_start":5,"column_end":69}}]},{"kind":"StructVariant","id":{"krate":0,"index":739},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":29475,"byte_end":29492,"line_start":243,"line_end":243,"column_start":5,"column_end":22},"name":"ChannelAftertouch","qualname":"::event::MidiMessage::ChannelAftertouch","value":"MidiMessage::ChannelAftertouch { vel }","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Change the note velocity of a whole channel at once, without starting new notes.\n","sig":null,"attributes":[{"value":"/ Change the note velocity of a whole channel at once, without starting new notes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":29386,"byte_end":29470,"line_start":242,"line_end":242,"column_start":5,"column_end":89}}]},{"kind":"StructVariant","id":{"krate":0,"index":741},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":29657,"byte_end":29666,"line_start":248,"line_end":248,"column_start":5,"column_end":14},"name":"PitchBend","qualname":"::event::MidiMessage::PitchBend","value":"MidiMessage::PitchBend { bend }","parent":{"krate":0,"index":724},"children":[],"decl_id":null,"docs":" Set the pitch bend value for the entire channel.\n","sig":null,"attributes":[{"value":"/ Set the pitch bend value for the entire channel.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":29600,"byte_end":29652,"line_start":247,"line_end":247,"column_start":5,"column_end":57}}]},{"kind":"Enum","id":{"krate":0,"index":724},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":28213,"byte_end":28224,"line_start":203,"line_end":203,"column_start":10,"column_end":21},"name":"MidiMessage","qualname":"::event::MidiMessage","value":"pub enum MidiMessage {\n\n    /// Stop playing a note.\n    NoteOff {\n        /// The MIDI key to stop playing.\n        key: u7,\n        /// The velocity with which to stop playing it.\n        vel: u7,\n    },\n\n    /// Start playing a note.\n    NoteOn {\n        /// The key to start playing.\n        key: u7,\n        /// The velocity (strength) with which to press it.\n        ///\n        /// Note that by convention a `NoteOn` message with a velocity of 0 is equivalent to a\n        /// `NoteOff`.\n        vel: u7,\n    },\n\n    /// Modify the velocity of a note after it has been played.\n    Aftertouch {\n        /// The key for which to modify its velocity.\n        key: u7,\n        /// The new velocity for the key.\n        vel: u7,\n    },\n\n    /// Modify the value of a MIDI controller.\n    Controller {\n        /// The controller to modify.\n        ///\n        /// See the MIDI spec for the meaning of each index.\n        controller: u7,\n        /// The value to set it to.\n        value: u7,\n    },\n\n    /// Change the program (also known as instrument) for a channel.\n    ProgramChange {\n        /// The new program (instrument) to use for the channel.\n        program: u7,\n    },\n\n    /// Change the note velocity of a whole channel at once, without starting new notes.\n    ChannelAftertouch {\n        /// The new velocity for all notes currently playing in the channel.\n        vel: u7,\n    },\n\n    /// Set the pitch bend value for the entire channel.\n    PitchBend {\n        /// The new pitch-bend value.\n        bend: PitchBend,\n    },\n}","parent":null,"children":[{"krate":0,"index":725},{"krate":0,"index":728},{"krate":0,"index":731},{"krate":0,"index":734},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":741}],"decl_id":null,"docs":" Represents a MIDI message, usually associated to a MIDI channel.","sig":null,"attributes":[{"value":"/ Represents a MIDI message, usually associated to a MIDI channel.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":27822,"byte_end":27890,"line_start":197,"line_end":197,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":27891,"byte_end":27894,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ If you wish to parse a MIDI message from a slice of raw MIDI bytes, use the","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":27895,"byte_end":27974,"line_start":199,"line_end":199,"column_start":1,"column_end":80}},{"value":"/ [`LiveEvent::parse`](live/enum.LiveEvent.html#method.parse) method instead and ignore all","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":27975,"byte_end":28068,"line_start":200,"line_end":200,"column_start":1,"column_end":94}},{"value":"/ variants except for [`LiveEvent::Midi`](live/enum.LiveEvent.html#variant.Midi).","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":28069,"byte_end":28152,"line_start":201,"line_end":201,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":760},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34106,"byte_end":34115,"line_start":359,"line_end":359,"column_start":12,"column_end":21},"name":"PitchBend","qualname":"::event::PitchBend","value":"","parent":null,"children":[],"decl_id":null,"docs":" The value of a pitch bend, represented as 14 bits.","sig":null,"attributes":[{"value":"/ The value of a pitch bend, represented as 14 bits.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":33834,"byte_end":33888,"line_start":353,"line_end":353,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":33889,"byte_end":33892,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ A value of `0x0000` indicates full bend downwards.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":33893,"byte_end":33947,"line_start":355,"line_end":355,"column_start":1,"column_end":55}},{"value":"/ A value of `0x2000` indicates no bend.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":33948,"byte_end":33990,"line_start":356,"line_end":356,"column_start":1,"column_end":43}},{"value":"/ A value of `0x3FFF` indicates full bend upwards.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":33991,"byte_end":34043,"line_start":357,"line_end":357,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":762},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34116,"byte_end":34123,"line_start":359,"line_end":359,"column_start":22,"column_end":29},"name":"0","qualname":"::event::PitchBend::0","value":"primitive::u14","parent":{"krate":0,"index":760},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34245,"byte_end":34258,"line_start":363,"line_end":363,"column_start":18,"column_end":31},"name":"min_raw_value","qualname":"<PitchBend>::min_raw_value","value":"pub const fn min_raw_value() -> PitchBend","parent":null,"children":[],"decl_id":null,"docs":" The minimum value of `0x0000`, indicating full bend downwards.\n","sig":null,"attributes":[{"value":"/ The minimum value of `0x0000`, indicating full bend downwards.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34147,"byte_end":34213,"line_start":361,"line_end":361,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34218,"byte_end":34227,"line_start":362,"line_end":362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34408,"byte_end":34421,"line_start":369,"line_end":369,"column_start":18,"column_end":31},"name":"mid_raw_value","qualname":"<PitchBend>::mid_raw_value","value":"pub const fn mid_raw_value() -> PitchBend","parent":null,"children":[],"decl_id":null,"docs":" The middle value of `0x2000`, indicating no bend.\n","sig":null,"attributes":[{"value":"/ The middle value of `0x2000`, indicating no bend.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34323,"byte_end":34376,"line_start":367,"line_end":367,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34381,"byte_end":34390,"line_start":368,"line_end":368,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34582,"byte_end":34595,"line_start":375,"line_end":375,"column_start":18,"column_end":31},"name":"max_raw_value","qualname":"<PitchBend>::max_raw_value","value":"pub const fn max_raw_value() -> PitchBend","parent":null,"children":[],"decl_id":null,"docs":" The maximum value of `0x3FFF`, indicating full bend upwards.\n","sig":null,"attributes":[{"value":"/ The maximum value of `0x3FFF`, indicating full bend upwards.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34486,"byte_end":34550,"line_start":373,"line_end":373,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34555,"byte_end":34564,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34823,"byte_end":34831,"line_start":383,"line_end":383,"column_start":12,"column_end":20},"name":"from_int","qualname":"<PitchBend>::from_int","value":"pub fn from_int(i16) -> PitchBend","parent":null,"children":[],"decl_id":null,"docs":" Create a `PitchBend` value from an int in the range `[-0x2000, 0x1FFF]`.","sig":null,"attributes":[{"value":"/ Create a `PitchBend` value from an int in the range `[-0x2000, 0x1FFF]`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34660,"byte_end":34736,"line_start":379,"line_end":379,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34741,"byte_end":34744,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ Integers outside this range will be clamped.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34749,"byte_end":34797,"line_start":381,"line_end":381,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34802,"byte_end":34811,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35101,"byte_end":35109,"line_start":391,"line_end":391,"column_start":12,"column_end":20},"name":"from_f32","qualname":"<PitchBend>::from_f32","value":"pub fn from_f32(f32) -> PitchBend","parent":null,"children":[],"decl_id":null,"docs":" Create a `PitchBend` value from a number in the range `[-1.0, 1.0)`.","sig":null,"attributes":[{"value":"/ Create a `PitchBend` value from a number in the range `[-1.0, 1.0)`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34944,"byte_end":35016,"line_start":387,"line_end":387,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35021,"byte_end":35024,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ Floats outside this range will be clamped.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35029,"byte_end":35075,"line_start":389,"line_end":389,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35080,"byte_end":35089,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35384,"byte_end":35392,"line_start":399,"line_end":399,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<PitchBend>::from_f64","value":"pub fn from_f64(f64) -> PitchBend","parent":null,"children":[],"decl_id":null,"docs":" Create a `PitchBend` value from a number in the range `[-1.0, 1.0)`.","sig":null,"attributes":[{"value":"/ Create a `PitchBend` value from a number in the range `[-1.0, 1.0)`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35227,"byte_end":35299,"line_start":395,"line_end":395,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35304,"byte_end":35307,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ Floats outside this range will be clamped.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35312,"byte_end":35358,"line_start":397,"line_end":397,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35363,"byte_end":35372,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35588,"byte_end":35594,"line_start":405,"line_end":405,"column_start":12,"column_end":18},"name":"as_int","qualname":"<PitchBend>::as_int","value":"pub fn as_int(Self) -> i16","parent":null,"children":[],"decl_id":null,"docs":" Returns an int in the range `[-0x2000, 0x1FFF]`.\n","sig":null,"attributes":[{"value":"/ Returns an int in the range `[-0x2000, 0x1FFF]`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35510,"byte_end":35562,"line_start":403,"line_end":403,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35567,"byte_end":35576,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35735,"byte_end":35741,"line_start":411,"line_end":411,"column_start":12,"column_end":18},"name":"as_f32","qualname":"<PitchBend>::as_f32","value":"pub fn as_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns an `f32` in the range `[-1.0, 1.0)`.\n","sig":null,"attributes":[{"value":"/ Returns an `f32` in the range `[-1.0, 1.0)`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35661,"byte_end":35709,"line_start":409,"line_end":409,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35714,"byte_end":35723,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35895,"byte_end":35901,"line_start":417,"line_end":417,"column_start":12,"column_end":18},"name":"as_f64","qualname":"<PitchBend>::as_f64","value":"pub fn as_f64(Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns an `f64` in the range `[-1.0, 1.0)`.\n","sig":null,"attributes":[{"value":"/ Returns an `f64` in the range `[-1.0, 1.0)`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35821,"byte_end":35869,"line_start":415,"line_end":415,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35874,"byte_end":35883,"line_start":416,"line_end":416,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":780},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36328,"byte_end":36339,"line_start":428,"line_end":428,"column_start":5,"column_end":16},"name":"TrackNumber","qualname":"::event::MetaMessage::TrackNumber","value":"MetaMessage::TrackNumber(Option<u16>)","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" For `Format::Sequential` MIDI file types, `TrackNumber` can be empty, and defaults to\n the track index.\n","sig":null,"attributes":[{"value":"/ For `Format::Sequential` MIDI file types, `TrackNumber` can be empty, and defaults to","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36209,"byte_end":36298,"line_start":426,"line_end":426,"column_start":5,"column_end":94}},{"value":"/ the track index.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36303,"byte_end":36323,"line_start":427,"line_end":427,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":783},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36358,"byte_end":36362,"line_start":429,"line_end":429,"column_start":5,"column_end":9},"name":"Text","qualname":"::event::MetaMessage::Text","value":"MetaMessage::Text(&'a [u8])","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":786},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36378,"byte_end":36387,"line_start":430,"line_end":430,"column_start":5,"column_end":14},"name":"Copyright","qualname":"::event::MetaMessage::Copyright","value":"MetaMessage::Copyright(&'a [u8])","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":789},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36403,"byte_end":36412,"line_start":431,"line_end":431,"column_start":5,"column_end":14},"name":"TrackName","qualname":"::event::MetaMessage::TrackName","value":"MetaMessage::TrackName(&'a [u8])","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":792},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36428,"byte_end":36442,"line_start":432,"line_end":432,"column_start":5,"column_end":19},"name":"InstrumentName","qualname":"::event::MetaMessage::InstrumentName","value":"MetaMessage::InstrumentName(&'a [u8])","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":795},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36458,"byte_end":36463,"line_start":433,"line_end":433,"column_start":5,"column_end":10},"name":"Lyric","qualname":"::event::MetaMessage::Lyric","value":"MetaMessage::Lyric(&'a [u8])","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":798},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36479,"byte_end":36485,"line_start":434,"line_end":434,"column_start":5,"column_end":11},"name":"Marker","qualname":"::event::MetaMessage::Marker","value":"MetaMessage::Marker(&'a [u8])","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":801},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36501,"byte_end":36509,"line_start":435,"line_end":435,"column_start":5,"column_end":13},"name":"CuePoint","qualname":"::event::MetaMessage::CuePoint","value":"MetaMessage::CuePoint(&'a [u8])","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":804},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36525,"byte_end":36536,"line_start":436,"line_end":436,"column_start":5,"column_end":16},"name":"ProgramName","qualname":"::event::MetaMessage::ProgramName","value":"MetaMessage::ProgramName(&'a [u8])","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":807},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36552,"byte_end":36562,"line_start":437,"line_end":437,"column_start":5,"column_end":15},"name":"DeviceName","qualname":"::event::MetaMessage::DeviceName","value":"MetaMessage::DeviceName(&'a [u8])","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":810},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36578,"byte_end":36589,"line_start":438,"line_end":438,"column_start":5,"column_end":16},"name":"MidiChannel","qualname":"::event::MetaMessage::MidiChannel","value":"MetaMessage::MidiChannel(u4)","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":813},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36599,"byte_end":36607,"line_start":439,"line_end":439,"column_start":5,"column_end":13},"name":"MidiPort","qualname":"::event::MetaMessage::MidiPort","value":"MetaMessage::MidiPort(u7)","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":816},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36650,"byte_end":36660,"line_start":441,"line_end":441,"column_start":5,"column_end":15},"name":"EndOfTrack","qualname":"::event::MetaMessage::EndOfTrack","value":"MetaMessage::EndOfTrack","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Obligatory at track end.\n","sig":null,"attributes":[{"value":"/ Obligatory at track end.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36617,"byte_end":36645,"line_start":440,"line_end":440,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":818},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36853,"byte_end":36858,"line_start":446,"line_end":446,"column_start":5,"column_end":10},"name":"Tempo","qualname":"::event::MetaMessage::Tempo","value":"MetaMessage::Tempo(u24)","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" Amount of microseconds per beat (quarter note).","sig":null,"attributes":[{"value":"/ Amount of microseconds per beat (quarter note).","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36666,"byte_end":36717,"line_start":442,"line_end":442,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36722,"byte_end":36725,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ Usually appears at the beggining of a track, before any midi events are sent, but there","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36730,"byte_end":36821,"line_start":444,"line_end":444,"column_start":5,"column_end":96}},{"value":"/ are no guarantees.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36826,"byte_end":36848,"line_start":445,"line_end":445,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":821},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36869,"byte_end":36880,"line_start":447,"line_end":447,"column_start":5,"column_end":16},"name":"SmpteOffset","qualname":"::event::MetaMessage::SmpteOffset","value":"MetaMessage::SmpteOffset(SmpteTime)","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":824},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37019,"byte_end":37032,"line_start":450,"line_end":450,"column_start":5,"column_end":18},"name":"TimeSignature","qualname":"::event::MetaMessage::TimeSignature","value":"MetaMessage::TimeSignature(u8, u8, u8, u8)","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" In order of the MIDI specification, numerator, denominator, MIDI clocks per click, 32nd\n notes per quarter\n","sig":null,"attributes":[{"value":"/ In order of the MIDI specification, numerator, denominator, MIDI clocks per click, 32nd","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36897,"byte_end":36988,"line_start":448,"line_end":448,"column_start":5,"column_end":96}},{"value":"/ notes per quarter","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36993,"byte_end":37014,"line_start":449,"line_end":449,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":830},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37263,"byte_end":37275,"line_start":454,"line_end":454,"column_start":5,"column_end":17},"name":"KeySignature","qualname":"::event::MetaMessage::KeySignature","value":"MetaMessage::KeySignature(i8, bool)","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" As in the MIDI specification, negative numbers indicate number of flats and positive\n numbers indicate number of sharps.\n `false` indicates a major scale, `true` indicates a minor scale.\n","sig":null,"attributes":[{"value":"/ As in the MIDI specification, negative numbers indicate number of flats and positive","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37054,"byte_end":37142,"line_start":451,"line_end":451,"column_start":5,"column_end":93}},{"value":"/ numbers indicate number of sharps.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37147,"byte_end":37185,"line_start":452,"line_end":452,"column_start":5,"column_end":43}},{"value":"/ `false` indicates a major scale, `true` indicates a minor scale.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37190,"byte_end":37258,"line_start":453,"line_end":453,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":834},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37291,"byte_end":37308,"line_start":455,"line_end":455,"column_start":5,"column_end":22},"name":"SequencerSpecific","qualname":"::event::MetaMessage::SequencerSpecific","value":"MetaMessage::SequencerSpecific(&'a [u8])","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":837},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37503,"byte_end":37510,"line_start":460,"line_end":460,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::event::MetaMessage::Unknown","value":"MetaMessage::Unknown(u8, &'a [u8])","parent":{"krate":0,"index":778},"children":[],"decl_id":null,"docs":" An unknown or malformed meta-message.","sig":null,"attributes":[{"value":"/ An unknown or malformed meta-message.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37324,"byte_end":37365,"line_start":456,"line_end":456,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37370,"byte_end":37373,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ The first `u8` is the raw meta-message identifier byte.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37378,"byte_end":37437,"line_start":458,"line_end":458,"column_start":5,"column_end":64}},{"value":"/ The slice is the actual payload of the meta-message.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37442,"byte_end":37498,"line_start":459,"line_end":459,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":778},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36187,"byte_end":36198,"line_start":425,"line_end":425,"column_start":10,"column_end":21},"name":"MetaMessage","qualname":"::event::MetaMessage","value":"pub enum MetaMessage<'a> {\n\n    /// For `Format::Sequential` MIDI file types, `TrackNumber` can be empty, and defaults to\n    /// the track index.\n    TrackNumber(Option<u16>),\n    Text(&'a [u8]),\n    Copyright(&'a [u8]),\n    TrackName(&'a [u8]),\n    InstrumentName(&'a [u8]),\n    Lyric(&'a [u8]),\n    Marker(&'a [u8]),\n    CuePoint(&'a [u8]),\n    ProgramName(&'a [u8]),\n    DeviceName(&'a [u8]),\n    MidiChannel(u4),\n    MidiPort(u7),\n\n    /// Obligatory at track end.\n    EndOfTrack,\n\n    /// Amount of microseconds per beat (quarter note).\n    ///\n    /// Usually appears at the beggining of a track, before any midi events are sent, but there\n    /// are no guarantees.\n    Tempo(u24),\n    SmpteOffset(SmpteTime),\n\n    /// In order of the MIDI specification, numerator, denominator, MIDI clocks per click, 32nd\n    /// notes per quarter\n    TimeSignature(u8, u8, u8, u8),\n\n    /// As in the MIDI specification, negative numbers indicate number of flats and positive\n    /// numbers indicate number of sharps.\n    /// `false` indicates a major scale, `true` indicates a minor scale.\n    KeySignature(i8, bool),\n    SequencerSpecific(&'a [u8]),\n\n    /// An unknown or malformed meta-message.\n    ///\n    /// The first `u8` is the raw meta-message identifier byte.\n    /// The slice is the actual payload of the meta-message.\n    Unknown(u8, &'a [u8]),\n}","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":783},{"krate":0,"index":786},{"krate":0,"index":789},{"krate":0,"index":792},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":813},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":821},{"krate":0,"index":824},{"krate":0,"index":830},{"krate":0,"index":834},{"krate":0,"index":837}],"decl_id":null,"docs":" A \"meta message\", as defined by the SMF spec.\n These events carry metadata about the track, such as tempo, time signature, copyright, etc...\n","sig":null,"attributes":[{"value":"/ A \"meta message\", as defined by the SMF spec.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":35979,"byte_end":36028,"line_start":422,"line_end":422,"column_start":1,"column_end":50}},{"value":"/ These events carry metadata about the track, such as tempo, time signature, copyright, etc...","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":36029,"byte_end":36126,"line_start":423,"line_end":423,"column_start":1,"column_end":98}}]},{"kind":"Mod","id":{"krate":0,"index":167},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":177},{"krate":0,"index":867},{"krate":0,"index":872},{"krate":0,"index":870},{"krate":0,"index":868},{"krate":0,"index":873},{"krate":0,"index":877},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":194},{"krate":0,"index":198},{"krate":0,"index":206},{"krate":0,"index":212},{"krate":0,"index":880},{"krate":0,"index":884},{"krate":0,"index":215},{"krate":0,"index":229},{"krate":0,"index":236},{"krate":0,"index":887},{"krate":0,"index":895},{"krate":0,"index":893},{"krate":0,"index":240},{"krate":0,"index":897},{"krate":0,"index":907},{"krate":0,"index":904},{"krate":0,"index":901},{"krate":0,"index":246},{"krate":0,"index":910},{"krate":0,"index":920},{"krate":0,"index":917},{"krate":0,"index":914},{"krate":0,"index":252},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":266}],"decl_id":null,"docs":" Provides abstractions over writers, even in `no_std` environments.","sig":null,"attributes":[{"value":"/ Provides abstractions over writers, even in `no_std` environments.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":41604,"byte_end":41674,"line_start":1,"line_end":1,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":41675,"byte_end":41678,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, `IoWrap` and `SeekableWrap` provide a bridge between the","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":41679,"byte_end":41774,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ `std::io` API and the `midly::io` API.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":41775,"byte_end":41817,"line_start":4,"line_end":4,"column_start":1,"column_end":43}},{"value":"/ Besides, `write` methods that work with `midly::io::Write` types usually provide a `write_std`","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":41818,"byte_end":41916,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ variant that works with `std::io::Write` types when the `std` feature is enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":41917,"byte_end":42002,"line_start":6,"line_end":6,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":169},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42098,"byte_end":42109,"line_start":11,"line_end":11,"column_start":10,"column_end":21},"name":"WriteResult","qualname":"::io::WriteResult","value":"StdResult<(), <W as Write>::Error>","parent":null,"children":[],"decl_id":null,"docs":" Either `Ok(())` or the error specific to the `W` writer.\n","sig":null,"attributes":[{"value":"/ Either `Ok(())` or the error specific to the `W` writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42028,"byte_end":42088,"line_start":10,"line_end":10,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":171},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42249,"byte_end":42254,"line_start":14,"line_end":14,"column_start":11,"column_end":16},"name":"Write","qualname":"::io::Write","value":"Write","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"decl_id":null,"docs":" A `Write` trait available even in `no_std` environments, and with per-type errors.\n","sig":null,"attributes":[{"value":"/ A `Write` trait available even in `no_std` environments, and with per-type errors.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42152,"byte_end":42238,"line_start":13,"line_end":13,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":172},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42313,"byte_end":42318,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Error","qualname":"::io::Write::Error","value":"type Error;","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" The error type specific to the writer.\n","sig":null,"attributes":[{"value":"/ The error type specific to the writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42261,"byte_end":42303,"line_start":15,"line_end":15,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":173},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42406,"byte_end":42414,"line_start":18,"line_end":18,"column_start":10,"column_end":18},"name":"Seekable","qualname":"::io::Write::Seekable","value":"type Seekable: Write<Error = Self::Error, Seekable = Self::Seekable> + Seek;","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" `Self` when the type is seekable, and `NotSeekable<Self>` otherwise.\n","sig":null,"attributes":[{"value":"/ `Self` when the type is seekable, and `NotSeekable<Self>` otherwise.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42324,"byte_end":42396,"line_start":17,"line_end":17,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42601,"byte_end":42606,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"write","qualname":"::io::Write::write","value":"pub fn write(&mut Self, &[u8]) -> WriteResult<Self>","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" Write a slice of data to the writer.","sig":null,"attributes":[{"value":"/ Write a slice of data to the writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42483,"byte_end":42523,"line_start":20,"line_end":20,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42528,"byte_end":42531,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Should error if not all of the data could be written.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42536,"byte_end":42593,"line_start":22,"line_end":22,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42728,"byte_end":42741,"line_start":25,"line_end":25,"column_start":8,"column_end":21},"name":"invalid_input","qualname":"::io::Write::invalid_input","value":"pub fn invalid_input(&'static str) -> Self::Error","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" Create an \"invalid input\"-style error from a string literal.\n","sig":null,"attributes":[{"value":"/ Create an \"invalid input\"-style error from a string literal.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42656,"byte_end":42720,"line_start":24,"line_end":24,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42846,"byte_end":42859,"line_start":28,"line_end":28,"column_start":8,"column_end":21},"name":"make_seekable","qualname":"::io::Write::make_seekable","value":"pub fn make_seekable(&mut Self) -> Option<&mut Self::Seekable>","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" Make this writer seekable, if possible.\n","sig":null,"attributes":[{"value":"/ Make this writer seekable, if possible.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42781,"byte_end":42824,"line_start":26,"line_end":26,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42829,"byte_end":42838,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":177},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43110,"byte_end":43114,"line_start":37,"line_end":37,"column_start":11,"column_end":15},"name":"Seek","qualname":"::io::Seek","value":"Seek: Write","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179}],"decl_id":null,"docs":" A `Seek` trait available even in `no_std` environments.","sig":null,"attributes":[{"value":"/ A `Seek` trait available even in `no_std` environments.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42926,"byte_end":42985,"line_start":33,"line_end":33,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42986,"byte_end":42989,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Not all of the `Seek` functionality is required, only the functionality required to write MIDI","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":42990,"byte_end":43088,"line_start":35,"line_end":35,"column_start":1,"column_end":99}},{"value":"/ files.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43089,"byte_end":43099,"line_start":36,"line_end":36,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43173,"byte_end":43177,"line_start":39,"line_end":39,"column_start":8,"column_end":12},"name":"tell","qualname":"::io::Seek::tell","value":"pub fn tell(&mut Self) -> StdResult<u64, Self::Error>","parent":{"krate":0,"index":177},"children":[],"decl_id":null,"docs":" Where is the writer currently at.\n","sig":null,"attributes":[{"value":"/ Where is the writer currently at.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43128,"byte_end":43165,"line_start":38,"line_end":38,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43346,"byte_end":43354,"line_start":42,"line_end":42,"column_start":8,"column_end":16},"name":"write_at","qualname":"::io::Seek::write_at","value":"pub fn write_at(&mut Self, &[u8], u64) -> WriteResult<Self>","parent":{"krate":0,"index":177},"children":[],"decl_id":null,"docs":" Write a slice of data at the given absolute position, and return to the end of the writer\n afterwards.\n","sig":null,"attributes":[{"value":"/ Write a slice of data at the given absolute position, and return to the end of the writer","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43225,"byte_end":43318,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ afterwards.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43323,"byte_end":43338,"line_start":41,"line_end":41,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":873},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43612,"byte_end":43623,"line_start":51,"line_end":51,"column_start":12,"column_end":23},"name":"NotSeekable","qualname":"::io::NotSeekable","value":"NotSeekable {  }","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":876}],"decl_id":null,"docs":" The type used for the [`Seekable`](trait.Write.html#associatedtype.Seekable) associated type on\n non-seekable writers.\n","sig":null,"attributes":[{"value":"/ The type used for the [`Seekable`](trait.Write.html#associatedtype.Seekable) associated type on","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43458,"byte_end":43557,"line_start":48,"line_end":48,"column_start":1,"column_end":100}},{"value":"/ non-seekable writers.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43558,"byte_end":43583,"line_start":49,"line_end":49,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43851,"byte_end":43859,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"as_never","qualname":"<NotSeekable<W>>::as_never","value":"pub fn as_never(&Self) -> !","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43830,"byte_end":43839,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":880},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":45891,"byte_end":45897,"line_start":147,"line_end":147,"column_start":12,"column_end":18},"name":"Cursor","qualname":"::io::Cursor","value":"Cursor {  }","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":883}],"decl_id":null,"docs":" A seekable writer over an in-memory buffer.","sig":null,"attributes":[{"value":"/ A seekable writer over an in-memory buffer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":45742,"byte_end":45789,"line_start":143,"line_end":143,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":45790,"byte_end":45793,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ Available even when the `std` and `alloc` features are disabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":45794,"byte_end":45862,"line_start":145,"line_end":145,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46062,"byte_end":46065,"line_start":154,"line_end":154,"column_start":12,"column_end":15},"name":"new","qualname":"<Cursor>::new","value":"pub fn new(&mut [u8]) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Create a new cursor located at the start of the given buffer.\n","sig":null,"attributes":[{"value":"/ Create a new cursor located at the start of the given buffer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":45971,"byte_end":46036,"line_start":152,"line_end":152,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46041,"byte_end":46050,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46341,"byte_end":46351,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Cursor>::from_parts","value":"pub fn from_parts(&mut [u8], usize) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Create a cursor from a buffer and the cursor within it.","sig":null,"attributes":[{"value":"/ Create a cursor from a buffer and the cursor within it.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46180,"byte_end":46239,"line_start":161,"line_end":161,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46244,"byte_end":46247,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46252,"byte_end":46264,"line_start":163,"line_end":163,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46269,"byte_end":46272,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Panics if `cursor > buffer.len()`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46277,"byte_end":46315,"line_start":165,"line_end":165,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46320,"byte_end":46329,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46756,"byte_end":46766,"line_start":182,"line_end":182,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<Cursor>::into_parts","value":"pub fn into_parts(Self) -> (&'a mut [u8], usize)","parent":null,"children":[],"decl_id":null,"docs":" Yield the underlying buffer and the cursor within it.","sig":null,"attributes":[{"value":"/ Yield the underlying buffer and the cursor within it.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46600,"byte_end":46657,"line_start":178,"line_end":178,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46662,"byte_end":46665,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ The cursor is guaranteed to be `cursor <= buffer.len()`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46670,"byte_end":46730,"line_start":180,"line_end":180,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46735,"byte_end":46744,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46917,"byte_end":46922,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"name":"slice","qualname":"<Cursor>::slice","value":"pub fn slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the whole underlying buffer.\n","sig":null,"attributes":[{"value":"/ Get a reference to the whole underlying buffer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46840,"byte_end":46891,"line_start":186,"line_end":186,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46896,"byte_end":46905,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47054,"byte_end":47063,"line_start":194,"line_end":194,"column_start":12,"column_end":21},"name":"slice_mut","qualname":"<Cursor>::slice_mut","value":"pub fn slice_mut(&mut Self) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the whole underlying buffer.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the whole underlying buffer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":46969,"byte_end":47028,"line_start":192,"line_end":192,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47033,"byte_end":47042,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47179,"byte_end":47185,"line_start":200,"line_end":200,"column_start":12,"column_end":18},"name":"cursor","qualname":"<Cursor>::cursor","value":"pub fn cursor(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the position of the cursor.\n","sig":null,"attributes":[{"value":"/ Get the position of the cursor.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47118,"byte_end":47153,"line_start":198,"line_end":198,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47158,"byte_end":47167,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47315,"byte_end":47322,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"written","qualname":"<Cursor>::written","value":"pub fn written(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the written portion of the buffer.\n","sig":null,"attributes":[{"value":"/ Get a reference to the written portion of the buffer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47232,"byte_end":47289,"line_start":204,"line_end":204,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47294,"byte_end":47303,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47481,"byte_end":47490,"line_start":212,"line_end":212,"column_start":12,"column_end":21},"name":"unwritten","qualname":"<Cursor>::unwritten","value":"pub fn unwritten(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the portion of the buffer that is not yet written.\n","sig":null,"attributes":[{"value":"/ Get a reference to the portion of the buffer that is not yet written.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47382,"byte_end":47455,"line_start":210,"line_end":210,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47460,"byte_end":47469,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47634,"byte_end":47639,"line_start":218,"line_end":218,"column_start":12,"column_end":17},"name":"split","qualname":"<Cursor>::split","value":"pub fn split(&Self) -> (&[u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Split the buffer into the written and unwritten parts.\n","sig":null,"attributes":[{"value":"/ Split the buffer into the written and unwritten parts.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47550,"byte_end":47608,"line_start":216,"line_end":216,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47613,"byte_end":47622,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47805,"byte_end":47816,"line_start":224,"line_end":224,"column_start":12,"column_end":23},"name":"written_mut","qualname":"<Cursor>::written_mut","value":"pub fn written_mut(&mut Self) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the written portion of the buffer.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the written portion of the buffer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47714,"byte_end":47779,"line_start":222,"line_end":222,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47784,"byte_end":47793,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47995,"byte_end":48008,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"unwritten_mut","qualname":"<Cursor>::unwritten_mut","value":"pub fn unwritten_mut(&mut Self) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the portion of the buffer that is not yet written.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the portion of the buffer that is not yet written.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47888,"byte_end":47969,"line_start":228,"line_end":228,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":47974,"byte_end":47983,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":48164,"byte_end":48173,"line_start":236,"line_end":236,"column_start":12,"column_end":21},"name":"split_mut","qualname":"<Cursor>::split_mut","value":"pub fn split_mut(&mut Self) -> (&mut [u8], &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Split the buffer into the written and unwritten parts.\n","sig":null,"attributes":[{"value":"/ Split the buffer into the written and unwritten parts.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":48080,"byte_end":48138,"line_start":234,"line_end":234,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":48143,"byte_end":48152,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":888},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":49850,"byte_end":49860,"line_start":289,"line_end":289,"column_start":5,"column_end":15},"name":"OutOfSpace","qualname":"::io::CursorError::OutOfSpace","value":"CursorError::OutOfSpace","parent":{"krate":0,"index":887},"children":[],"decl_id":null,"docs":" The in-memory buffer was too small.\n","sig":null,"attributes":[{"value":"/ The in-memory buffer was too small.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":49806,"byte_end":49845,"line_start":288,"line_end":288,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":890},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":49901,"byte_end":49913,"line_start":291,"line_end":291,"column_start":5,"column_end":17},"name":"InvalidInput","qualname":"::io::CursorError::InvalidInput","value":"CursorError::InvalidInput(&'static str)","parent":{"krate":0,"index":887},"children":[],"decl_id":null,"docs":" The input SMF was invalid.\n","sig":null,"attributes":[{"value":"/ The input SMF was invalid.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":49866,"byte_end":49896,"line_start":290,"line_end":290,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":887},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":49788,"byte_end":49799,"line_start":287,"line_end":287,"column_start":10,"column_end":21},"name":"CursorError","qualname":"::io::CursorError","value":"pub enum CursorError {\n\n    /// The in-memory buffer was too small.\n    OutOfSpace,\n\n    /// The input SMF was invalid.\n    InvalidInput(&'static str),\n}","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":890}],"decl_id":null,"docs":" The errors that can arise when writing to an in-memory buffer.\n","sig":null,"attributes":[{"value":"/ The errors that can arise when writing to an in-memory buffer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":49688,"byte_end":49754,"line_start":285,"line_end":285,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":897},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":50806,"byte_end":50812,"line_start":319,"line_end":319,"column_start":12,"column_end":18},"name":"IoWrap","qualname":"::io::IoWrap","value":"","parent":null,"children":[],"decl_id":null,"docs":" Bridge between a `midly::io::Write` type and a `std::io::Write` type.","sig":null,"attributes":[{"value":"/ Bridge between a `midly::io::Write` type and a `std::io::Write` type.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":50588,"byte_end":50661,"line_start":315,"line_end":315,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":50662,"byte_end":50665,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ Always available, but only implements `midly::io::Write` when the `std` feature is enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":50666,"byte_end":50761,"line_start":317,"line_end":317,"column_start":1,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":900},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":50816,"byte_end":50821,"line_start":319,"line_end":319,"column_start":22,"column_end":27},"name":"0","qualname":"::io::IoWrap::0","value":"T","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":910},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":51460,"byte_end":51472,"line_start":339,"line_end":339,"column_start":12,"column_end":24},"name":"SeekableWrap","qualname":"::io::SeekableWrap","value":"","parent":null,"children":[],"decl_id":null,"docs":" Bridge between a `midly::io::{Write, Seek}` type and a `std::io::{Write, Seek}` type.","sig":null,"attributes":[{"value":"/ Bridge between a `midly::io::{Write, Seek}` type and a `std::io::{Write, Seek}` type.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":51214,"byte_end":51303,"line_start":334,"line_end":334,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":51304,"byte_end":51307,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ Always available, but only implements `midly::io::{Write, Seek}` when the `std` feature is","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":51308,"byte_end":51402,"line_start":336,"line_end":336,"column_start":1,"column_end":95}},{"value":"/ enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":51403,"byte_end":51415,"line_start":337,"line_end":337,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":913},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":51476,"byte_end":51481,"line_start":339,"line_end":339,"column_start":28,"column_end":33},"name":"0","qualname":"::io::SeekableWrap::0","value":"T","parent":{"krate":0,"index":910},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":271},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"live","qualname":"::live","value":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":923},{"krate":0,"index":955},{"krate":0,"index":952},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":938},{"krate":0,"index":934},{"krate":0,"index":278},{"krate":0,"index":958},{"krate":0,"index":1000},{"krate":0,"index":997},{"krate":0,"index":991},{"krate":0,"index":993},{"krate":0,"index":986},{"krate":0,"index":988},{"krate":0,"index":983},{"krate":0,"index":979},{"krate":0,"index":294},{"krate":0,"index":1003},{"krate":0,"index":1033},{"krate":0,"index":1031},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1023},{"krate":0,"index":1020},{"krate":0,"index":299},{"krate":0,"index":1034},{"krate":0,"index":1064},{"krate":0,"index":1062},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1053},{"krate":0,"index":1050},{"krate":0,"index":304}],"decl_id":null,"docs":" Provides utilities to read and write \"live\" MIDI messages produced in real-time, in contrast\n with \"dead\" MIDI messages as stored in a `.mid` file.","sig":null,"attributes":[{"value":"/ Provides utilities to read and write \"live\" MIDI messages produced in real-time, in contrast","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":52893,"byte_end":52989,"line_start":1,"line_end":1,"column_start":1,"column_end":97}},{"value":"/ with \"dead\" MIDI messages as stored in a `.mid` file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":52990,"byte_end":53047,"line_start":2,"line_end":2,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53048,"byte_end":53051,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ [`LiveEvent`](enum.LiveEvent.html) is very similar to","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53052,"byte_end":53109,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/ [`TrackEventKind`](../enum.TrackEventKind.html), except for subtle differences such as system","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53110,"byte_end":53207,"line_start":5,"line_end":5,"column_start":1,"column_end":98}},{"value":"/ realtime messages, which can only exist in live events, or escape sequences, which can only","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53208,"byte_end":53303,"line_start":6,"line_end":6,"column_start":1,"column_end":96}},{"value":"/ exist within track events.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53304,"byte_end":53334,"line_start":7,"line_end":7,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53335,"byte_end":53338,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Usually OS APIs (and notably [`midir`](https://docs.rs/midir)) produce MIDI messages as a slice","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53339,"byte_end":53438,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ of raw MIDI bytes, which can be parsed through","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53439,"byte_end":53489,"line_start":10,"line_end":10,"column_start":1,"column_end":51}},{"value":"/ [`LiveEvent::parse`](enum.LiveEvent.html#method.parse) and written through","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53490,"byte_end":53568,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ [`LiveEvent::write`](enum.LiveEvent.html#method.write).","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53569,"byte_end":53628,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53629,"byte_end":53632,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Note that MIDI byte streams, which are not clearly delimited packets, must be parsed through","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53633,"byte_end":53729,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ the [`stream`](../stream/index.html) api.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53730,"byte_end":53775,"line_start":15,"line_end":15,"column_start":1,"column_end":46}}]},{"kind":"StructVariant","id":{"krate":0,"index":925},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54271,"byte_end":54275,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"Midi","qualname":"::live::LiveEvent::Midi","value":"LiveEvent::Midi { channel, message }","parent":{"krate":0,"index":923},"children":[],"decl_id":null,"docs":" A MIDI message associated with a channel, carrying musical data.\n","sig":null,"attributes":[{"value":"/ A MIDI message associated with a channel, carrying musical data.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54198,"byte_end":54266,"line_start":27,"line_end":27,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":928},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54416,"byte_end":54422,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"Common","qualname":"::live::LiveEvent::Common","value":"LiveEvent::Common(SystemCommon)","parent":{"krate":0,"index":923},"children":[],"decl_id":null,"docs":" A System Common message, as defined by the MIDI spec, including System Exclusive events.\n","sig":null,"attributes":[{"value":"/ A System Common message, as defined by the MIDI spec, including System Exclusive events.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54319,"byte_end":54411,"line_start":29,"line_end":29,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":931},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54490,"byte_end":54498,"line_start":32,"line_end":32,"column_start":5,"column_end":13},"name":"Realtime","qualname":"::live::LiveEvent::Realtime","value":"LiveEvent::Realtime(SystemRealtime)","parent":{"krate":0,"index":923},"children":[],"decl_id":null,"docs":" A one-byte System Realtime message.\n","sig":null,"attributes":[{"value":"/ A one-byte System Realtime message.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54446,"byte_end":54485,"line_start":31,"line_end":31,"column_start":5,"column_end":44}}]},{"kind":"Enum","id":{"krate":0,"index":923},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54178,"byte_end":54187,"line_start":26,"line_end":26,"column_start":10,"column_end":19},"name":"LiveEvent","qualname":"::live::LiveEvent","value":"pub enum LiveEvent<'a> {\n\n    /// A MIDI message associated with a channel, carrying musical data.\n    Midi {\n        channel: u4,\n        message: MidiMessage,\n    },\n\n    /// A System Common message, as defined by the MIDI spec, including System Exclusive events.\n    Common(SystemCommon),\n\n    /// A one-byte System Realtime message.\n    Realtime(SystemRealtime),\n}","parent":null,"children":[{"krate":0,"index":925},{"krate":0,"index":928},{"krate":0,"index":931}],"decl_id":null,"docs":" A live event produced by an OS API or generated on-the-fly, in contrast with \"dead\"\n [`TrackEvent`](../struct.TrackEvent.html)s stored in a `.mid` file.","sig":null,"attributes":[{"value":"/ A live event produced by an OS API or generated on-the-fly, in contrast with \"dead\"","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53892,"byte_end":53979,"line_start":21,"line_end":21,"column_start":1,"column_end":88}},{"value":"/ [`TrackEvent`](../struct.TrackEvent.html)s stored in a `.mid` file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":53980,"byte_end":54051,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54052,"byte_end":54055,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ See the [`live`](index.html) module for more information.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54056,"byte_end":54117,"line_start":24,"line_end":24,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54761,"byte_end":54766,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"parse","qualname":"<LiveEvent>::parse","value":"pub fn parse(&'a [u8]) -> Result<LiveEvent>","parent":null,"children":[],"decl_id":null,"docs":" Parse a complete MIDI message from its raw bytes.","sig":null,"attributes":[{"value":"/ Parse a complete MIDI message from its raw bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54547,"byte_end":54600,"line_start":35,"line_end":35,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54605,"byte_end":54608,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ This method can be used to parse raw MIDI bytes coming from an OS API.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54613,"byte_end":54687,"line_start":37,"line_end":37,"column_start":5,"column_end":79}},{"value":"/ Also see the example in the root crate documentation.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54692,"byte_end":54749,"line_start":38,"line_end":38,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":55770,"byte_end":55775,"line_start":67,"line_end":67,"column_start":12,"column_end":17},"name":"write","qualname":"<LiveEvent>::write","value":"pub fn write<W: Write>(&Self, &mut W) -> WriteResult<W>","parent":null,"children":[],"decl_id":null,"docs":" Write a standalone message to the given output.","sig":null,"attributes":[{"value":"/ Write a standalone message to the given output.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":55546,"byte_end":55597,"line_start":62,"line_end":62,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":55602,"byte_end":55605,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ This method can be used to write messages to be consumed by OS APIs.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":55610,"byte_end":55682,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/ Also see the example in the root crate documentation.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":55687,"byte_end":55744,"line_start":65,"line_end":65,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":55749,"byte_end":55758,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":56095,"byte_end":56120,"line_start":74,"line_end":74,"column_start":12,"column_end":37},"name":"write_with_running_status","qualname":"<LiveEvent>::write_with_running_status","value":"pub fn write_with_running_status<W: Write>(&Self, &mut Option<u8>, &mut W)\n-> WriteResult<W>","parent":null,"children":[],"decl_id":null,"docs":" Write a message, skipping the status if it shares the status with the previous message.","sig":null,"attributes":[{"value":"/ Write a message, skipping the status if it shares the status with the previous message.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":55892,"byte_end":55983,"line_start":71,"line_end":71,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":55988,"byte_end":55991,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Note that it's usually discouraged to feed messages with running status to OS APIs.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":55996,"byte_end":56083,"line_start":73,"line_end":73,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57085,"byte_end":57094,"line_start":104,"line_end":104,"column_start":12,"column_end":21},"name":"write_std","qualname":"<LiveEvent>::write_std","value":"pub fn write_std<W: io::Write>(&Self, W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a standalone message to the given `std::io::Write` output.","sig":null,"attributes":[{"value":"/ Write a standalone message to the given `std::io::Write` output.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":56885,"byte_end":56953,"line_start":99,"line_end":99,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":56958,"byte_end":56961,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ This method is only available with the `std` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":56966,"byte_end":57031,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57036,"byte_end":57059,"line_start":102,"line_end":102,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57064,"byte_end":57073,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57515,"byte_end":57544,"line_start":115,"line_end":115,"column_start":12,"column_end":41},"name":"write_std_with_running_status","qualname":"<LiveEvent>::write_std_with_running_status","value":"pub fn write_std_with_running_status<W: io::Write>(&Self, &mut Option<u8>, W)\n-> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a message, skipping the status if it shares the status with the previous message.","sig":null,"attributes":[{"value":"/ Write a message, skipping the status if it shares the status with the previous message.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57192,"byte_end":57283,"line_start":108,"line_end":108,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57288,"byte_end":57291,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Note that it's usually discouraged to feed messages with running status to OS APIs.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57296,"byte_end":57383,"line_start":110,"line_end":110,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57388,"byte_end":57391,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This method is only available with the `std` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57396,"byte_end":57461,"line_start":112,"line_end":112,"column_start":5,"column_end":70}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57466,"byte_end":57489,"line_start":113,"line_end":113,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57494,"byte_end":57503,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":58486,"byte_end":58500,"line_start":136,"line_end":136,"column_start":12,"column_end":26},"name":"as_track_event","qualname":"<LiveEvent>::as_track_event","value":"pub fn as_track_event<'b>(&Self, &'b Arena) -> TrackEventKind","parent":null,"children":[],"decl_id":null,"docs":" Convert this `LiveEvent` into a static [`TrackEventKind`](../enum.TrackEventKind.html),\n which can be written to a `.mid` file.","sig":null,"attributes":[{"value":"/ Convert this `LiveEvent` into a static [`TrackEventKind`](../enum.TrackEventKind.html),","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57742,"byte_end":57833,"line_start":123,"line_end":123,"column_start":5,"column_end":96}},{"value":"/ which can be written to a `.mid` file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57838,"byte_end":57880,"line_start":124,"line_end":124,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57885,"byte_end":57888,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ This method takes an [`Arena`](../arena/struct.Arena.html) allocator, since all","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57893,"byte_end":57976,"line_start":126,"line_end":126,"column_start":5,"column_end":88}},{"value":"/ `LiveEvent` variants other than `Midi` require allocation to be converted.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":57981,"byte_end":58059,"line_start":127,"line_end":127,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":58064,"byte_end":58067,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Unlike [`as_live_event`](../enum.TrackEventKind.html#method.as_live_event), this method","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":58072,"byte_end":58163,"line_start":129,"line_end":129,"column_start":5,"column_end":96}},{"value":"/ does not return an `Option`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":58168,"byte_end":58200,"line_start":130,"line_end":130,"column_start":5,"column_end":37}},{"value":"/ Any messages that do not have an analogous `TrackEventKind` variant will be encoded into","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":58205,"byte_end":58297,"line_start":131,"line_end":131,"column_start":5,"column_end":97}},{"value":"/ their raw bytes and converted as `TrackEventKind::Escape`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":58302,"byte_end":58364,"line_start":132,"line_end":132,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":58369,"byte_end":58372,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ This method is only available with the `alloc` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":58377,"byte_end":58444,"line_start":134,"line_end":134,"column_start":5,"column_end":72}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":58449,"byte_end":58474,"line_start":135,"line_end":135,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":960},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60532,"byte_end":60537,"line_start":182,"line_end":182,"column_start":5,"column_end":10},"name":"SysEx","qualname":"::live::SystemCommon::SysEx","value":"SystemCommon::SysEx(&'a [u7])","parent":{"krate":0,"index":958},"children":[],"decl_id":null,"docs":" A system-exclusive event.","sig":null,"attributes":[{"value":"/ A system-exclusive event.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60298,"byte_end":60327,"line_start":178,"line_end":178,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60332,"byte_end":60335,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ System Exclusive events start with a `0xF0` byte and finish with a `0xF7` byte, but this","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60340,"byte_end":60432,"line_start":180,"line_end":180,"column_start":5,"column_end":97}},{"value":"/ slice does not include either: it only includes data bytes in the `0x00..=0x7F` range.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60437,"byte_end":60527,"line_start":181,"line_end":181,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":963},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60644,"byte_end":60668,"line_start":184,"line_end":184,"column_start":5,"column_end":29},"name":"MidiTimeCodeQuarterFrame","qualname":"::live::SystemCommon::MidiTimeCodeQuarterFrame","value":"SystemCommon::MidiTimeCodeQuarterFrame(MtcQuarterFrameMessage, u4)","parent":{"krate":0,"index":958},"children":[],"decl_id":null,"docs":" A MIDI Time Code Quarter Frame message, carrying a tag type and a 4-bit tag value.\n","sig":null,"attributes":[{"value":"/ A MIDI Time Code Quarter Frame message, carrying a tag type and a 4-bit tag value.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60553,"byte_end":60639,"line_start":183,"line_end":183,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":967},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60812,"byte_end":60824,"line_start":187,"line_end":187,"column_start":5,"column_end":17},"name":"SongPosition","qualname":"::live::SystemCommon::SongPosition","value":"SystemCommon::SongPosition(u14)","parent":{"krate":0,"index":958},"children":[],"decl_id":null,"docs":" The number of MIDI beats (6 x MIDI clocks) that have elapsed since the start of the\n sequence.\n","sig":null,"attributes":[{"value":"/ The number of MIDI beats (6 x MIDI clocks) that have elapsed since the start of the","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60702,"byte_end":60789,"line_start":185,"line_end":185,"column_start":5,"column_end":92}},{"value":"/ sequence.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60794,"byte_end":60807,"line_start":186,"line_end":186,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":970},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60870,"byte_end":60880,"line_start":189,"line_end":189,"column_start":5,"column_end":15},"name":"SongSelect","qualname":"::live::SystemCommon::SongSelect","value":"SystemCommon::SongSelect(u7)","parent":{"krate":0,"index":958},"children":[],"decl_id":null,"docs":" Select a given song index.\n","sig":null,"attributes":[{"value":"/ Select a given song index.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60835,"byte_end":60865,"line_start":188,"line_end":188,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":973},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60890,"byte_end":60901,"line_start":190,"line_end":190,"column_start":5,"column_end":16},"name":"TuneRequest","qualname":"::live::SystemCommon::TuneRequest","value":"SystemCommon::TuneRequest","parent":{"krate":0,"index":958},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":975},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60978,"byte_end":60987,"line_start":192,"line_end":192,"column_start":5,"column_end":14},"name":"Undefined","qualname":"::live::SystemCommon::Undefined","value":"SystemCommon::Undefined(u8, &'a [u7])","parent":{"krate":0,"index":958},"children":[],"decl_id":null,"docs":" An undefined System Common message, with arbitrary data bytes.\n","sig":null,"attributes":[{"value":"/ An undefined System Common message, with arbitrary data bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60907,"byte_end":60973,"line_start":191,"line_end":191,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":958},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60275,"byte_end":60287,"line_start":177,"line_end":177,"column_start":10,"column_end":22},"name":"SystemCommon","qualname":"::live::SystemCommon","value":"pub enum SystemCommon<'a> {\n\n    /// A system-exclusive event.\n    ///\n    /// System Exclusive events start with a `0xF0` byte and finish with a `0xF7` byte, but this\n    /// slice does not include either: it only includes data bytes in the `0x00..=0x7F` range.\n    SysEx(&'a [u7]),\n\n    /// A MIDI Time Code Quarter Frame message, carrying a tag type and a 4-bit tag value.\n    MidiTimeCodeQuarterFrame(MtcQuarterFrameMessage, u4),\n\n    /// The number of MIDI beats (6 x MIDI clocks) that have elapsed since the start of the\n    /// sequence.\n    SongPosition(u14),\n\n    /// Select a given song index.\n    SongSelect(u7),\n    TuneRequest,\n\n    /// An undefined System Common message, with arbitrary data bytes.\n    Undefined(u8, &'a [u7]),\n}","parent":null,"children":[{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":967},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":975}],"decl_id":null,"docs":" A \"system common event\", as defined by the MIDI spec.\n","sig":null,"attributes":[{"value":"/ A \"system common event\", as defined by the MIDI spec.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":60157,"byte_end":60214,"line_start":175,"line_end":175,"column_start":1,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1004},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63545,"byte_end":63554,"line_start":263,"line_end":263,"column_start":5,"column_end":14},"name":"FramesLow","qualname":"::live::MtcQuarterFrameMessage::FramesLow","value":"MtcQuarterFrameMessage::FramesLow","parent":{"krate":0,"index":1003},"children":[],"decl_id":null,"docs":" The low nibble of the frame count.\n","sig":null,"attributes":[{"value":"/ The low nibble of the frame count.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63502,"byte_end":63540,"line_start":262,"line_end":262,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1006},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63604,"byte_end":63614,"line_start":265,"line_end":265,"column_start":5,"column_end":15},"name":"FramesHigh","qualname":"::live::MtcQuarterFrameMessage::FramesHigh","value":"MtcQuarterFrameMessage::FramesHigh","parent":{"krate":0,"index":1003},"children":[],"decl_id":null,"docs":" The high nibble of the frame count.\n","sig":null,"attributes":[{"value":"/ The high nibble of the frame count.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63560,"byte_end":63599,"line_start":264,"line_end":264,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1008},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63664,"byte_end":63674,"line_start":267,"line_end":267,"column_start":5,"column_end":15},"name":"SecondsLow","qualname":"::live::MtcQuarterFrameMessage::SecondsLow","value":"MtcQuarterFrameMessage::SecondsLow","parent":{"krate":0,"index":1003},"children":[],"decl_id":null,"docs":" The low nibble of the second count.\n","sig":null,"attributes":[{"value":"/ The low nibble of the second count.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63620,"byte_end":63659,"line_start":266,"line_end":266,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1010},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63725,"byte_end":63736,"line_start":269,"line_end":269,"column_start":5,"column_end":16},"name":"SecondsHigh","qualname":"::live::MtcQuarterFrameMessage::SecondsHigh","value":"MtcQuarterFrameMessage::SecondsHigh","parent":{"krate":0,"index":1003},"children":[],"decl_id":null,"docs":" The high nibble of the second count.\n","sig":null,"attributes":[{"value":"/ The high nibble of the second count.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63680,"byte_end":63720,"line_start":268,"line_end":268,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1012},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63786,"byte_end":63796,"line_start":271,"line_end":271,"column_start":5,"column_end":15},"name":"MinutesLow","qualname":"::live::MtcQuarterFrameMessage::MinutesLow","value":"MtcQuarterFrameMessage::MinutesLow","parent":{"krate":0,"index":1003},"children":[],"decl_id":null,"docs":" The low nibble of the minute count.\n","sig":null,"attributes":[{"value":"/ The low nibble of the minute count.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63742,"byte_end":63781,"line_start":270,"line_end":270,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1014},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63847,"byte_end":63858,"line_start":273,"line_end":273,"column_start":5,"column_end":16},"name":"MinutesHigh","qualname":"::live::MtcQuarterFrameMessage::MinutesHigh","value":"MtcQuarterFrameMessage::MinutesHigh","parent":{"krate":0,"index":1003},"children":[],"decl_id":null,"docs":" The high nibble of the minute count.\n","sig":null,"attributes":[{"value":"/ The high nibble of the minute count.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63802,"byte_end":63842,"line_start":272,"line_end":272,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1016},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63906,"byte_end":63914,"line_start":275,"line_end":275,"column_start":5,"column_end":13},"name":"HoursLow","qualname":"::live::MtcQuarterFrameMessage::HoursLow","value":"MtcQuarterFrameMessage::HoursLow","parent":{"krate":0,"index":1003},"children":[],"decl_id":null,"docs":" The low nibble of the hour count.\n","sig":null,"attributes":[{"value":"/ The low nibble of the hour count.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63864,"byte_end":63901,"line_start":274,"line_end":274,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1018},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63963,"byte_end":63972,"line_start":277,"line_end":277,"column_start":5,"column_end":14},"name":"HoursHigh","qualname":"::live::MtcQuarterFrameMessage::HoursHigh","value":"MtcQuarterFrameMessage::HoursHigh","parent":{"krate":0,"index":1003},"children":[],"decl_id":null,"docs":" The high nibble of the hour count.\n","sig":null,"attributes":[{"value":"/ The high nibble of the hour count.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63920,"byte_end":63958,"line_start":276,"line_end":276,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":1003},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63473,"byte_end":63495,"line_start":261,"line_end":261,"column_start":10,"column_end":32},"name":"MtcQuarterFrameMessage","qualname":"::live::MtcQuarterFrameMessage","value":"pub enum MtcQuarterFrameMessage {\n\n    /// The low nibble of the frame count.\n    FramesLow,\n\n    /// The high nibble of the frame count.\n    FramesHigh,\n\n    /// The low nibble of the second count.\n    SecondsLow,\n\n    /// The high nibble of the second count.\n    SecondsHigh,\n\n    /// The low nibble of the minute count.\n    MinutesLow,\n\n    /// The high nibble of the minute count.\n    MinutesHigh,\n\n    /// The low nibble of the hour count.\n    HoursLow,\n\n    /// The high nibble of the hour count.\n    HoursHigh,\n}","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1014},{"krate":0,"index":1016},{"krate":0,"index":1018}],"decl_id":null,"docs":" The different kinds of info a Midi Time Code Quarter Frame message can carry.\n","sig":null,"attributes":[{"value":"/ The different kinds of info a Midi Time Code Quarter Frame message can carry.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63331,"byte_end":63412,"line_start":259,"line_end":259,"column_start":1,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1035},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65100,"byte_end":65111,"line_start":315,"line_end":315,"column_start":5,"column_end":16},"name":"TimingClock","qualname":"::live::SystemRealtime::TimingClock","value":"SystemRealtime::TimingClock","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":" If sent, they should be sent 24 times per quarter note.\n","sig":null,"attributes":[{"value":"/ If sent, they should be sent 24 times per quarter note.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65036,"byte_end":65095,"line_start":314,"line_end":314,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1037},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65117,"byte_end":65122,"line_start":316,"line_end":316,"column_start":5,"column_end":10},"name":"Start","qualname":"::live::SystemRealtime::Start","value":"SystemRealtime::Start","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1039},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65128,"byte_end":65136,"line_start":317,"line_end":317,"column_start":5,"column_end":13},"name":"Continue","qualname":"::live::SystemRealtime::Continue","value":"SystemRealtime::Continue","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1041},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65142,"byte_end":65146,"line_start":318,"line_end":318,"column_start":5,"column_end":9},"name":"Stop","qualname":"::live::SystemRealtime::Stop","value":"SystemRealtime::Stop","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1043},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65292,"byte_end":65305,"line_start":321,"line_end":321,"column_start":5,"column_end":18},"name":"ActiveSensing","qualname":"::live::SystemRealtime::ActiveSensing","value":"SystemRealtime::ActiveSensing","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":" Once one of these messages is transmitted, a message should arrive every 300ms or else the\n connection is considered broken.\n","sig":null,"attributes":[{"value":"/ Once one of these messages is transmitted, a message should arrive every 300ms or else the","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65152,"byte_end":65246,"line_start":319,"line_end":319,"column_start":5,"column_end":99}},{"value":"/ connection is considered broken.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65251,"byte_end":65287,"line_start":320,"line_end":320,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1045},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65311,"byte_end":65316,"line_start":322,"line_end":322,"column_start":5,"column_end":10},"name":"Reset","qualname":"::live::SystemRealtime::Reset","value":"SystemRealtime::Reset","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1047},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65390,"byte_end":65399,"line_start":324,"line_end":324,"column_start":5,"column_end":14},"name":"Undefined","qualname":"::live::SystemRealtime::Undefined","value":"SystemRealtime::Undefined(u8)","parent":{"krate":0,"index":1034},"children":[],"decl_id":null,"docs":" An unknown system realtime message, with the given id byte.\n","sig":null,"attributes":[{"value":"/ An unknown system realtime message, with the given id byte.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65322,"byte_end":65385,"line_start":323,"line_end":323,"column_start":5,"column_end":68}}]},{"kind":"Enum","id":{"krate":0,"index":1034},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65015,"byte_end":65029,"line_start":313,"line_end":313,"column_start":10,"column_end":24},"name":"SystemRealtime","qualname":"::live::SystemRealtime","value":"pub enum SystemRealtime {\n\n    /// If sent, they should be sent 24 times per quarter note.\n    TimingClock,\n    Start,\n    Continue,\n    Stop,\n\n    /// Once one of these messages is transmitted, a message should arrive every 300ms or else the\n    /// connection is considered broken.\n    ActiveSensing,\n    Reset,\n\n    /// An unknown system realtime message, with the given id byte.\n    Undefined(u8),\n}","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1041},{"krate":0,"index":1043},{"krate":0,"index":1045},{"krate":0,"index":1047}],"decl_id":null,"docs":" System Realtime messages are one-byte messages that only occur within live MIDI streams.\n They are usually time-sensitive, get top priority and can even be transmitted in between other\n messages.\n","sig":null,"attributes":[{"value":"/ System Realtime messages are one-byte messages that only occur within live MIDI streams.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":64749,"byte_end":64841,"line_start":309,"line_end":309,"column_start":1,"column_end":93}},{"value":"/ They are usually time-sensitive, get top priority and can even be transmitted in between other","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":64842,"byte_end":64940,"line_start":310,"line_end":310,"column_start":1,"column_end":99}},{"value":"/ messages.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":64941,"byte_end":64954,"line_start":311,"line_end":311,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65511,"byte_end":65514,"line_start":329,"line_end":329,"column_start":12,"column_end":15},"name":"new","qualname":"<SystemRealtime>::new","value":"pub fn new(u8) -> SystemRealtime","parent":null,"children":[],"decl_id":null,"docs":" Create a system realtime event from its id byte.\n","sig":null,"attributes":[{"value":"/ Create a system realtime event from its id byte.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65433,"byte_end":65485,"line_start":327,"line_end":327,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65490,"byte_end":65499,"line_start":328,"line_end":328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65994,"byte_end":66000,"line_start":347,"line_end":347,"column_start":12,"column_end":18},"name":"encode","qualname":"<SystemRealtime>::encode","value":"pub fn encode(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the id byte for this system realtime message.\n","sig":null,"attributes":[{"value":"/ Get the id byte for this system realtime message.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65915,"byte_end":65968,"line_start":345,"line_end":345,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65973,"byte_end":65982,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1101},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":75905,"byte_end":75908,"line_start":255,"line_end":255,"column_start":18,"column_end":21},"name":"u15","qualname":"::primitive::u15","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70052,"byte_end":70072,"line_start":99,"line_end":99,"column_start":9,"column_end":29}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70081,"byte_end":70111,"line_start":100,"line_end":100,"column_start":9,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1157},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":75944,"byte_end":75947,"line_start":256,"line_end":256,"column_start":18,"column_end":21},"name":"u14","qualname":"::primitive::u14","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70052,"byte_end":70072,"line_start":99,"line_end":99,"column_start":9,"column_end":29}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70081,"byte_end":70111,"line_start":100,"line_end":100,"column_start":9,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1220},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":75991,"byte_end":75993,"line_start":257,"line_end":257,"column_start":18,"column_end":20},"name":"u7","qualname":"::primitive::u7","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70052,"byte_end":70072,"line_start":99,"line_end":99,"column_start":9,"column_end":29}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70081,"byte_end":70111,"line_start":100,"line_end":100,"column_start":9,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1276},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":76027,"byte_end":76029,"line_start":258,"line_end":258,"column_start":18,"column_end":20},"name":"u4","qualname":"::primitive::u4","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70052,"byte_end":70072,"line_start":99,"line_end":99,"column_start":9,"column_end":29}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70081,"byte_end":70111,"line_start":100,"line_end":100,"column_start":9,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1332},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":76063,"byte_end":76065,"line_start":259,"line_end":259,"column_start":18,"column_end":20},"name":"u2","qualname":"::primitive::u2","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70052,"byte_end":70072,"line_start":99,"line_end":99,"column_start":9,"column_end":29}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70081,"byte_end":70111,"line_start":100,"line_end":100,"column_start":9,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1388},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":76099,"byte_end":76102,"line_start":260,"line_end":260,"column_start":18,"column_end":21},"name":"u24","qualname":"::primitive::u24","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70052,"byte_end":70072,"line_start":99,"line_end":99,"column_start":9,"column_end":29}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70081,"byte_end":70111,"line_start":100,"line_end":100,"column_start":9,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1442},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":76645,"byte_end":76648,"line_start":277,"line_end":277,"column_start":5,"column_end":8},"name":"u28","qualname":"::primitive::u28","value":"","parent":null,"children":[],"decl_id":null,"docs":" Referred to in the MIDI spec as \"variable length int\".\n","sig":null,"attributes":[{"value":"repr(transparent)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70053,"byte_end":70082,"line_start":99,"line_end":100,"column_start":10,"column_end":10}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":70082,"byte_end":70123,"line_start":100,"line_end":101,"column_start":10,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1476},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":79866,"byte_end":79877,"line_start":371,"line_end":371,"column_start":5,"column_end":16},"name":"SingleTrack","qualname":"::primitive::Format::SingleTrack","value":"Format::SingleTrack","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":" This file should have a single track only.","sig":null,"attributes":[{"value":"/ This file should have a single track only.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":79661,"byte_end":79707,"line_start":367,"line_end":367,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":79712,"byte_end":79715,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ If the `strict` feature is enabled, an error is raised if the format is","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":79720,"byte_end":79795,"line_start":369,"line_end":369,"column_start":5,"column_end":80}},{"value":"/ `Format::SingleTrack` and there is not exactly one track.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":79800,"byte_end":79861,"line_start":370,"line_end":370,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1478},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80038,"byte_end":80046,"line_start":375,"line_end":375,"column_start":5,"column_end":13},"name":"Parallel","qualname":"::primitive::Format::Parallel","value":"Format::Parallel","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":" This file has several tracks that should be played simultaneously.","sig":null,"attributes":[{"value":"/ This file has several tracks that should be played simultaneously.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":79883,"byte_end":79953,"line_start":372,"line_end":372,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":79958,"byte_end":79961,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Usually the first track controls tempo and other song metadata.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":79966,"byte_end":80033,"line_start":374,"line_end":374,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1480},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80252,"byte_end":80262,"line_start":380,"line_end":380,"column_start":5,"column_end":15},"name":"Sequential","qualname":"::primitive::Format::Sequential","value":"Format::Sequential","parent":{"krate":0,"index":1475},"children":[],"decl_id":null,"docs":" This file has several tracks, each one a separate song.","sig":null,"attributes":[{"value":"/ This file has several tracks, each one a separate song.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80052,"byte_end":80111,"line_start":376,"line_end":376,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80116,"byte_end":80119,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ The tracks should be played sequentially, as completely separate MIDI tracks packaged","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80124,"byte_end":80213,"line_start":378,"line_end":378,"column_start":5,"column_end":94}},{"value":"/ within a single SMF file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80218,"byte_end":80247,"line_start":379,"line_end":379,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":1475},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":79648,"byte_end":79654,"line_start":366,"line_end":366,"column_start":10,"column_end":16},"name":"Format","qualname":"::primitive::Format","value":"pub enum Format {\n\n    /// This file should have a single track only.\n    ///\n    /// If the `strict` feature is enabled, an error is raised if the format is\n    /// `Format::SingleTrack` and there is not exactly one track.\n    SingleTrack,\n\n    /// This file has several tracks that should be played simultaneously.\n    ///\n    /// Usually the first track controls tempo and other song metadata.\n    Parallel,\n\n    /// This file has several tracks, each one a separate song.\n    ///\n    /// The tracks should be played sequentially, as completely separate MIDI tracks packaged\n    /// within a single SMF file.\n    Sequential,\n}","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1480}],"decl_id":null,"docs":" The order in which tracks should be laid out when playing back this SMF file.\n","sig":null,"attributes":[{"value":"/ The order in which tracks should be laid out when playing back this SMF file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":79506,"byte_end":79587,"line_start":364,"line_end":364,"column_start":1,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1498},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":81234,"byte_end":81242,"line_start":411,"line_end":411,"column_start":5,"column_end":13},"name":"Metrical","qualname":"::primitive::Timing::Metrical","value":"Timing::Metrical(u15)","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":" Specifies ticks/beat as a 15-bit integer.","sig":null,"attributes":[{"value":"/ Specifies ticks/beat as a 15-bit integer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80983,"byte_end":81028,"line_start":407,"line_end":407,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":81033,"byte_end":81036,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ The length of a beat is not standard, so in order to fully describe the length of a MIDI","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":81041,"byte_end":81133,"line_start":409,"line_end":409,"column_start":5,"column_end":97}},{"value":"/ tick the [`MetaMessage::Tempo`](enum.MetaMessage.html#Tempo.v) event should be present.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":81138,"byte_end":81229,"line_start":410,"line_end":410,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1501},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":81405,"byte_end":81413,"line_start":414,"line_end":414,"column_start":5,"column_end":13},"name":"Timecode","qualname":"::primitive::Timing::Timecode","value":"Timing::Timecode(Fps, u8)","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":" Specifies ticks/second by dividing a second into frames and then into subframes.\n Therefore the length of of a tick is `1/fps/subframe`.\n","sig":null,"attributes":[{"value":"/ Specifies ticks/second by dividing a second into frames and then into subframes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":81253,"byte_end":81337,"line_start":412,"line_end":412,"column_start":5,"column_end":89}},{"value":"/ Therefore the length of of a tick is `1/fps/subframe`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":81342,"byte_end":81400,"line_start":413,"line_end":413,"column_start":5,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":1497},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80970,"byte_end":80976,"line_start":406,"line_end":406,"column_start":10,"column_end":16},"name":"Timing","qualname":"::primitive::Timing","value":"pub enum Timing {\n\n    /// Specifies ticks/beat as a 15-bit integer.\n    ///\n    /// The length of a beat is not standard, so in order to fully describe the length of a MIDI\n    /// tick the [`MetaMessage::Tempo`](enum.MetaMessage.html#Tempo.v) event should be present.\n    Metrical(u15),\n\n    /// Specifies ticks/second by dividing a second into frames and then into subframes.\n    /// Therefore the length of of a tick is `1/fps/subframe`.\n    Timecode(Fps, u8),\n}","parent":null,"children":[{"krate":0,"index":1498},{"krate":0,"index":1501}],"decl_id":null,"docs":" The timing for an SMF file.\n This can be in ticks/beat or ticks/second.\n","sig":null,"attributes":[{"value":"/ The timing for an SMF file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80831,"byte_end":80862,"line_start":403,"line_end":403,"column_start":1,"column_end":32}},{"value":"/ This can be in ticks/beat or ticks/second.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80863,"byte_end":80909,"line_start":404,"line_end":404,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1522},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82671,"byte_end":82680,"line_start":454,"line_end":454,"column_start":12,"column_end":21},"name":"SmpteTime","qualname":"::primitive::SmpteTime","value":"SmpteTime {  }","parent":null,"children":[{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1528}],"decl_id":null,"docs":" Encodes an SMPTE time of the day.","sig":null,"attributes":[{"value":"/ Encodes an SMPTE time of the day.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82370,"byte_end":82407,"line_start":444,"line_end":444,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82408,"byte_end":82411,"line_start":445,"line_end":445,"column_start":1,"column_end":4}},{"value":"/ Enforces several guarantees:","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82412,"byte_end":82444,"line_start":446,"line_end":446,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82445,"byte_end":82448,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ - `hour` is inside [0,23]","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82449,"byte_end":82478,"line_start":448,"line_end":448,"column_start":1,"column_end":30}},{"value":"/ - `minute` is inside [0,59]","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82479,"byte_end":82510,"line_start":449,"line_end":449,"column_start":1,"column_end":32}},{"value":"/ - `second` is inside [0,59]","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82511,"byte_end":82542,"line_start":450,"line_end":450,"column_start":1,"column_end":32}},{"value":"/ - `frame` is inside [0,fps[","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82543,"byte_end":82574,"line_start":451,"line_end":451,"column_start":1,"column_end":32}},{"value":"/ - `subframe` is inside [0,99]","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82575,"byte_end":82608,"line_start":452,"line_end":452,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82820,"byte_end":82823,"line_start":464,"line_end":464,"column_start":12,"column_end":15},"name":"new","qualname":"<SmpteTime>::new","value":"pub fn new(u8, u8, u8, u8, u8, Fps) -> Option<SmpteTime>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82799,"byte_end":82808,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83479,"byte_end":83483,"line_start":495,"line_end":495,"column_start":12,"column_end":16},"name":"hour","qualname":"<SmpteTime>::hour","value":"pub fn hour(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83458,"byte_end":83467,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83549,"byte_end":83555,"line_start":500,"line_end":500,"column_start":12,"column_end":18},"name":"minute","qualname":"<SmpteTime>::minute","value":"pub fn minute(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83528,"byte_end":83537,"line_start":499,"line_end":499,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83623,"byte_end":83629,"line_start":505,"line_end":505,"column_start":12,"column_end":18},"name":"second","qualname":"<SmpteTime>::second","value":"pub fn second(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83602,"byte_end":83611,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83697,"byte_end":83702,"line_start":510,"line_end":510,"column_start":12,"column_end":17},"name":"frame","qualname":"<SmpteTime>::frame","value":"pub fn frame(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83676,"byte_end":83685,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83769,"byte_end":83777,"line_start":515,"line_end":515,"column_start":12,"column_end":20},"name":"subframe","qualname":"<SmpteTime>::subframe","value":"pub fn subframe(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83748,"byte_end":83757,"line_start":514,"line_end":514,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83847,"byte_end":83850,"line_start":520,"line_end":520,"column_start":12,"column_end":15},"name":"fps","qualname":"<SmpteTime>::fps","value":"pub fn fps(&Self) -> Fps","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83826,"byte_end":83835,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83916,"byte_end":83926,"line_start":525,"line_end":525,"column_start":12,"column_end":22},"name":"second_f32","qualname":"<SmpteTime>::second_f32","value":"pub fn second_f32(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":83895,"byte_end":83904,"line_start":524,"line_end":524,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1547},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85138,"byte_end":85143,"line_start":561,"line_end":561,"column_start":5,"column_end":10},"name":"Fps24","qualname":"::primitive::Fps::Fps24","value":"Fps::Fps24","parent":{"krate":0,"index":1546},"children":[],"decl_id":null,"docs":" 24 frames per second.\n","sig":null,"attributes":[{"value":"/ 24 frames per second.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85108,"byte_end":85133,"line_start":560,"line_end":560,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1549},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85179,"byte_end":85184,"line_start":563,"line_end":563,"column_start":5,"column_end":10},"name":"Fps25","qualname":"::primitive::Fps::Fps25","value":"Fps::Fps25","parent":{"krate":0,"index":1546},"children":[],"decl_id":null,"docs":" 25 frames per second.\n","sig":null,"attributes":[{"value":"/ 25 frames per second.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85149,"byte_end":85174,"line_start":562,"line_end":562,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1551},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85328,"byte_end":85333,"line_start":567,"line_end":567,"column_start":5,"column_end":10},"name":"Fps29","qualname":"::primitive::Fps::Fps29","value":"Fps::Fps29","parent":{"krate":0,"index":1546},"children":[],"decl_id":null,"docs":" Actually `29.97 = 30 / 1.001` frames per second.","sig":null,"attributes":[{"value":"/ Actually `29.97 = 30 / 1.001` frames per second.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85190,"byte_end":85242,"line_start":564,"line_end":564,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85247,"byte_end":85250,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ Quite an exotic value because of interesting historical reasons.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85255,"byte_end":85323,"line_start":566,"line_end":566,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1553},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85369,"byte_end":85374,"line_start":569,"line_end":569,"column_start":5,"column_end":10},"name":"Fps30","qualname":"::primitive::Fps::Fps30","value":"Fps::Fps30","parent":{"krate":0,"index":1546},"children":[],"decl_id":null,"docs":" 30 frames per second.\n","sig":null,"attributes":[{"value":"/ 30 frames per second.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85339,"byte_end":85364,"line_start":568,"line_end":568,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":1546},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85098,"byte_end":85101,"line_start":559,"line_end":559,"column_start":10,"column_end":13},"name":"Fps","qualname":"::primitive::Fps","value":"pub enum Fps {\n\n    /// 24 frames per second.\n    Fps24,\n\n    /// 25 frames per second.\n    Fps25,\n\n    /// Actually `29.97 = 30 / 1.001` frames per second.\n    ///\n    /// Quite an exotic value because of interesting historical reasons.\n    Fps29,\n\n    /// 30 frames per second.\n    Fps30,\n}","parent":null,"children":[{"krate":0,"index":1547},{"krate":0,"index":1549},{"krate":0,"index":1551},{"krate":0,"index":1553}],"decl_id":null,"docs":" One of the four FPS values available for SMPTE times, as defined by the MIDI standard.\n","sig":null,"attributes":[{"value":"/ One of the four FPS values available for SMPTE times, as defined by the MIDI standard.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":84947,"byte_end":85037,"line_start":557,"line_end":557,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":86078,"byte_end":86086,"line_start":595,"line_end":595,"column_start":12,"column_end":20},"name":"from_int","qualname":"<Fps>::from_int","value":"pub fn from_int(u8) -> Option<Fps>","parent":null,"children":[],"decl_id":null,"docs":" Converts an integer representing the semantic fps to an `Fps` value (ie. `24` -> `Fps24`).\n","sig":null,"attributes":[{"value":"/ Converts an integer representing the semantic fps to an `Fps` value (ie. `24` -> `Fps24`).","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85958,"byte_end":86052,"line_start":593,"line_end":593,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":86057,"byte_end":86066,"line_start":594,"line_end":594,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":86377,"byte_end":86383,"line_start":607,"line_end":607,"column_start":12,"column_end":18},"name":"as_int","qualname":"<Fps>::as_int","value":"pub fn as_int(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the integral approximate fps out.\n","sig":null,"attributes":[{"value":"/ Get the integral approximate fps out.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":86310,"byte_end":86351,"line_start":605,"line_end":605,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":86356,"byte_end":86365,"line_start":606,"line_end":606,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":86619,"byte_end":86625,"line_start":618,"line_end":618,"column_start":12,"column_end":18},"name":"as_f32","qualname":"<Fps>::as_f32","value":"pub fn as_f32(Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Get the actual `f32` fps out.\n","sig":null,"attributes":[{"value":"/ Get the actual `f32` fps out.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":86560,"byte_end":86593,"line_start":616,"line_end":616,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":86598,"byte_end":86607,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":389},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":90586,"byte_end":90591,"line_start":51,"line_end":51,"column_start":10,"column_end":15},"name":"Track","qualname":"::smf::Track","value":"Vec<TrackEvent>","parent":null,"children":[],"decl_id":null,"docs":" A single track: simply a list of track events.","sig":null,"attributes":[{"value":"/ A single track: simply a list of track events.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":90443,"byte_end":90493,"line_start":47,"line_end":47,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":90494,"byte_end":90497,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Only available with the `alloc` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":90498,"byte_end":90550,"line_start":49,"line_end":49,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":90551,"byte_end":90576,"line_start":50,"line_end":50,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":1574},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91014,"byte_end":91017,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"Smf","qualname":"::smf::Smf","value":"Smf { header, tracks }","parent":null,"children":[{"krate":0,"index":1576},{"krate":0,"index":1577}],"decl_id":null,"docs":" Represents a single `.mid` Standard Midi File.\n If you're casually looking to parse a `.mid` file, this is the type you're looking for.","sig":null,"attributes":[{"value":"/ Represents a single `.mid` Standard Midi File.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":90620,"byte_end":90670,"line_start":53,"line_end":53,"column_start":1,"column_end":51}},{"value":"/ If you're casually looking to parse a `.mid` file, this is the type you're looking for.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":90671,"byte_end":90762,"line_start":54,"line_end":54,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":90763,"byte_end":90766,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This type is only available with the `alloc` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":90767,"byte_end":90832,"line_start":56,"line_end":56,"column_start":1,"column_end":66}},{"value":"/ If you're looking for a fully `no_std` alternative, see the [`parse`](fn.parse.html) function.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":90833,"byte_end":90931,"line_start":57,"line_end":57,"column_start":1,"column_end":99}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":90932,"byte_end":90957,"line_start":58,"line_end":58,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":1576},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91117,"byte_end":91123,"line_start":62,"line_end":62,"column_start":9,"column_end":15},"name":"header","qualname":"::smf::Smf::header","value":"smf::Header","parent":{"krate":0,"index":1574},"children":[],"decl_id":null,"docs":" The header of this MIDI file, indicating tempo information and track format.\n","sig":null,"attributes":[{"value":"/ The header of this MIDI file, indicating tempo information and track format.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91028,"byte_end":91108,"line_start":61,"line_end":61,"column_start":5,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":1577},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91286,"byte_end":91292,"line_start":66,"line_end":66,"column_start":9,"column_end":15},"name":"tracks","qualname":"::smf::Smf::tracks","value":"std::vec::Vec<std::vec::Vec<event::TrackEvent<'a>>>","parent":{"krate":0,"index":1574},"children":[],"decl_id":null,"docs":" A list of tracks within this MIDI file.","sig":null,"attributes":[{"value":"/ A list of tracks within this MIDI file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91137,"byte_end":91180,"line_start":63,"line_end":63,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91185,"byte_end":91188,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Each track consists simply of a list of events (ie. there is no track metadata).","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91193,"byte_end":91277,"line_start":65,"line_end":65,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91457,"byte_end":91460,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<Smf>::new","value":"pub fn new(Header) -> Smf","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `Smf` with zero tracks, using the given header.\n","sig":null,"attributes":[{"value":"/ Create a new empty `Smf` with zero tracks, using the given header.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91361,"byte_end":91431,"line_start":70,"line_end":70,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91436,"byte_end":91445,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91735,"byte_end":91740,"line_start":81,"line_end":81,"column_start":12,"column_end":17},"name":"parse","qualname":"<Smf>::parse","value":"pub fn parse(&[u8]) -> Result<Smf>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `.mid` Standard Midi File from its raw bytes.\n If you casually want to parse `.mid` files, this is the function you're looking for.\n","sig":null,"attributes":[{"value":"/ Parse a `.mid` Standard Midi File from its raw bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91573,"byte_end":91630,"line_start":79,"line_end":79,"column_start":5,"column_end":62}},{"value":"/ If you casually want to parse `.mid` files, this is the function you're looking for.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91635,"byte_end":91723,"line_start":80,"line_end":80,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92611,"byte_end":92616,"line_start":99,"line_end":99,"column_start":12,"column_end":17},"name":"write","qualname":"<Smf>::write","value":"pub fn write<W: Write>(&Self, &mut W) -> WriteResult<W>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and writes the file to the given generic writer.","sig":null,"attributes":[{"value":"/ Encodes and writes the file to the given generic writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92027,"byte_end":92087,"line_start":89,"line_end":89,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92092,"byte_end":92095,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Note that this function requires a `midly::io::Write` writer, not a `std::io::Write` writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92100,"byte_end":92196,"line_start":91,"line_end":91,"column_start":5,"column_end":101}},{"value":"/ This makes it possible to support `no_std` environments, as well as custom writer errors.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92201,"byte_end":92294,"line_start":92,"line_end":92,"column_start":5,"column_end":98}},{"value":"/ If you're looking to write to a `File`, see the [`save`](#method.save) method.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92299,"byte_end":92381,"line_start":93,"line_end":93,"column_start":5,"column_end":87}},{"value":"/ If you're looking to write to a `std::io::Write` writer, see the","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92386,"byte_end":92454,"line_start":94,"line_end":94,"column_start":5,"column_end":73}},{"value":"/ [`write_std`](#method.write_std) method.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92459,"byte_end":92503,"line_start":95,"line_end":95,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92508,"byte_end":92511,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ This function is always available, even in `no_std` environments.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92516,"byte_end":92585,"line_start":97,"line_end":97,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92590,"byte_end":92599,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93097,"byte_end":93106,"line_start":111,"line_end":111,"column_start":12,"column_end":21},"name":"write_std","qualname":"<Smf>::write_std","value":"pub fn write_std<W: io::Write>(&Self, W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and writes the file to the given `std::io::Write` writer.","sig":null,"attributes":[{"value":"/ Encodes and writes the file to the given `std::io::Write` writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92725,"byte_end":92794,"line_start":103,"line_end":103,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92799,"byte_end":92802,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ This function is similar to the [`write`](#method.write) method, but writes to a","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92807,"byte_end":92891,"line_start":105,"line_end":105,"column_start":5,"column_end":89}},{"value":"/ `std::io::Write` writer instead of a `midly::io::Write` writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92896,"byte_end":92963,"line_start":106,"line_end":106,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92968,"byte_end":92971,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This function is only available with the `std` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":92976,"byte_end":93043,"line_start":108,"line_end":108,"column_start":5,"column_end":72}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93048,"byte_end":93071,"line_start":109,"line_end":109,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93076,"byte_end":93085,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93402,"byte_end":93406,"line_start":120,"line_end":120,"column_start":12,"column_end":16},"name":"save","qualname":"<Smf>::save","value":"pub fn save<P: AsRef<Path>>(&Self, P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and writes the file to the given path.","sig":null,"attributes":[{"value":"/ Encodes and writes the file to the given path.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93218,"byte_end":93268,"line_start":115,"line_end":115,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93273,"byte_end":93276,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ This function is only available with the `std` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93281,"byte_end":93348,"line_start":117,"line_end":117,"column_start":5,"column_end":72}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93353,"byte_end":93376,"line_start":118,"line_end":118,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93381,"byte_end":93390,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":402},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94011,"byte_end":94026,"line_start":135,"line_end":135,"column_start":10,"column_end":25},"name":"BytemappedTrack","qualname":"::smf::BytemappedTrack","value":"Vec<(&'a [u8], TrackEvent)>","parent":null,"children":[],"decl_id":null,"docs":" A track, represented as a `Vec` of events along with their originating bytes.","sig":null,"attributes":[{"value":"/ A track, represented as a `Vec` of events along with their originating bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93818,"byte_end":93899,"line_start":131,"line_end":131,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93900,"byte_end":93903,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ This type alias is only available with the `alloc` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93904,"byte_end":93975,"line_start":133,"line_end":133,"column_start":1,"column_end":72}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":93976,"byte_end":94001,"line_start":134,"line_end":134,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":1599},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94314,"byte_end":94324,"line_start":142,"line_end":142,"column_start":12,"column_end":22},"name":"SmfBytemap","qualname":"::smf::SmfBytemap","value":"SmfBytemap { header, tracks }","parent":null,"children":[{"krate":0,"index":1601},{"krate":0,"index":1602}],"decl_id":null,"docs":" A `.mid` Standard Midi File, but keeps a mapping to the raw bytes that make up each event.","sig":null,"attributes":[{"value":"/ A `.mid` Standard Midi File, but keeps a mapping to the raw bytes that make up each event.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94067,"byte_end":94161,"line_start":137,"line_end":137,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94162,"byte_end":94165,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ This type is only available with the `alloc` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94166,"byte_end":94231,"line_start":139,"line_end":139,"column_start":1,"column_end":66}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94232,"byte_end":94257,"line_start":140,"line_end":140,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":1601},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94372,"byte_end":94378,"line_start":144,"line_end":144,"column_start":9,"column_end":15},"name":"header","qualname":"::smf::SmfBytemap::header","value":"smf::Header","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":" The header of this file.\n","sig":null,"attributes":[{"value":"/ The header of this file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94335,"byte_end":94363,"line_start":143,"line_end":143,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1602},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94462,"byte_end":94468,"line_start":146,"line_end":146,"column_start":9,"column_end":15},"name":"tracks","qualname":"::smf::SmfBytemap::tracks","value":"std::vec::Vec<std::vec::Vec<(&'a [u8], event::TrackEvent<'a>)>>","parent":{"krate":0,"index":1599},"children":[],"decl_id":null,"docs":" A list of tracks, along with the bytemap of their events.\n","sig":null,"attributes":[{"value":"/ A list of tracks, along with the bytemap of their events.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94392,"byte_end":94453,"line_start":145,"line_end":145,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94657,"byte_end":94660,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"new","qualname":"<SmfBytemap>::new","value":"pub fn new(Header) -> SmfBytemap","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `SmfBytemap` with zero tracks, using the given header.\n","sig":null,"attributes":[{"value":"/ Create a new empty `SmfBytemap` with zero tracks, using the given header.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94554,"byte_end":94631,"line_start":150,"line_end":150,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94636,"byte_end":94645,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94918,"byte_end":94923,"line_start":161,"line_end":161,"column_start":12,"column_end":17},"name":"parse","qualname":"<SmfBytemap>::parse","value":"pub fn parse(&[u8]) -> Result<SmfBytemap>","parent":null,"children":[],"decl_id":null,"docs":" Parse a Standard Midi File from its raw bytes, keeping a map to the original bytes that\n make up each event.\n","sig":null,"attributes":[{"value":"/ Parse a Standard Midi File from its raw bytes, keeping a map to the original bytes that","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94787,"byte_end":94878,"line_start":159,"line_end":159,"column_start":5,"column_end":96}},{"value":"/ make up each event.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94883,"byte_end":94906,"line_start":160,"line_end":160,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":95336,"byte_end":95341,"line_start":171,"line_end":171,"column_start":12,"column_end":17},"name":"write","qualname":"<SmfBytemap>::write","value":"pub fn write<W: Write>(&Self, &mut W) -> WriteResult<W>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and writes the *events* (not the bytemap) to the given generic writer.\n","sig":null,"attributes":[{"value":"/ Encodes and writes the *events* (not the bytemap) to the given generic writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":95228,"byte_end":95310,"line_start":169,"line_end":169,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":95315,"byte_end":95324,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":95817,"byte_end":95826,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"write_std","qualname":"<SmfBytemap>::write_std","value":"pub fn write_std<W: io::Write>(&Self, W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes and writes the *events* (not the bytemap) to the given `std::io::Write` writer.","sig":null,"attributes":[{"value":"/ Encodes and writes the *events* (not the bytemap) to the given `std::io::Write` writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":95592,"byte_end":95683,"line_start":181,"line_end":181,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":95688,"byte_end":95691,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ This function is only available with the `std` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":95696,"byte_end":95763,"line_start":183,"line_end":183,"column_start":5,"column_end":72}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":95768,"byte_end":95791,"line_start":184,"line_end":184,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":95796,"byte_end":95805,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":96320,"byte_end":96324,"line_start":202,"line_end":202,"column_start":12,"column_end":16},"name":"save","qualname":"<SmfBytemap>::save","value":"pub fn save<P: AsRef<Path>>(&Self, P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Creates/overwrites the file at the given path and writes the *events* (not the bytemap) to\n it.","sig":null,"attributes":[{"value":"/ Creates/overwrites the file at the given path and writes the *events* (not the bytemap) to","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":96080,"byte_end":96174,"line_start":196,"line_end":196,"column_start":5,"column_end":99}},{"value":"/ it.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":96179,"byte_end":96186,"line_start":197,"line_end":197,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":96191,"byte_end":96194,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ This function is only available with the `std` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":96199,"byte_end":96266,"line_start":199,"line_end":199,"column_start":5,"column_end":72}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":96271,"byte_end":96294,"line_start":200,"line_end":200,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":96299,"byte_end":96308,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":420},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":97547,"byte_end":97552,"line_start":234,"line_end":234,"column_start":8,"column_end":13},"name":"parse","qualname":"::smf::parse","value":"pub fn parse(&[u8]) -> Result<(Header, TrackIter)>","parent":null,"children":[],"decl_id":null,"docs":" Parse a raw MIDI file lazily, yielding its header and a lazy track iterator.\n No allocations are made.","sig":null,"attributes":[{"value":"/ Parse a raw MIDI file lazily, yielding its header and a lazy track iterator.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":97251,"byte_end":97331,"line_start":228,"line_end":228,"column_start":1,"column_end":81}},{"value":"/ No allocations are made.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":97332,"byte_end":97360,"line_start":229,"line_end":229,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":97361,"byte_end":97364,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ The track iterator that is returned yields event iterators, which in turn yield concrete events.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":97365,"byte_end":97465,"line_start":231,"line_end":231,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":97466,"byte_end":97469,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ This function is always available, even in `no_std` environments.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":97470,"byte_end":97539,"line_start":233,"line_end":233,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":421},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":99373,"byte_end":99378,"line_start":275,"line_end":275,"column_start":8,"column_end":13},"name":"write","qualname":"::smf::write","value":"pub fn write<'a, T, E, W>(&Header, T, &mut W) -> WriteResult<W> where\nT: IntoIterator<Item = E>, T::IntoIter: ExactSizeIterator + Clone + Send,\nE: IntoIterator<Item = &'a TrackEvent>, E::IntoIter: Clone + Send, W: Write","parent":null,"children":[],"decl_id":null,"docs":" Encode and write a generic MIDI file into the given generic writer.\n The MIDI file is represented by a header and a list of tracks.","sig":null,"attributes":[{"value":"/ Encode and write a generic MIDI file into the given generic writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98272,"byte_end":98343,"line_start":252,"line_end":252,"column_start":1,"column_end":72}},{"value":"/ The MIDI file is represented by a header and a list of tracks.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98344,"byte_end":98410,"line_start":253,"line_end":253,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98411,"byte_end":98414,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98415,"byte_end":98427,"line_start":255,"line_end":255,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98428,"byte_end":98431,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ The MIDI writer raises almost no errors by itself, it only bubbles errors from the underlying","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98432,"byte_end":98529,"line_start":257,"line_end":257,"column_start":1,"column_end":98}},{"value":"/ writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98530,"byte_end":98541,"line_start":258,"line_end":258,"column_start":1,"column_end":12}},{"value":"/ The only exception to this rule are extreme cases that break the limits of the MIDI spec: if","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98542,"byte_end":98638,"line_start":259,"line_end":259,"column_start":1,"column_end":97}},{"value":"/ there are more than 65535 tracks, if the data for a single event is 256MB or larger, or if the","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98639,"byte_end":98737,"line_start":260,"line_end":260,"column_start":1,"column_end":99}},{"value":"/ total size of any track is 4GB or larger.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98738,"byte_end":98783,"line_start":261,"line_end":261,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98784,"byte_end":98787,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98788,"byte_end":98814,"line_start":263,"line_end":263,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98815,"byte_end":98818,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ Currently this function will attempt to use multiple threads to encode the file if possible and","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98819,"byte_end":98918,"line_start":265,"line_end":265,"column_start":1,"column_end":100}},{"value":"/ the file is large enough to make it worth it.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98919,"byte_end":98968,"line_start":266,"line_end":266,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98969,"byte_end":98972,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ Otherwise, each track will be written to an in-memory buffer before writing to disk.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":98973,"byte_end":99061,"line_start":268,"line_end":268,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":99062,"byte_end":99065,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ If allocation is disabled, but the writer is seekable, the file will be written once and it","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":99066,"byte_end":99161,"line_start":270,"line_end":270,"column_start":1,"column_end":96}},{"value":"/ will be seeked back in order to write down the chunk sizes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":99162,"byte_end":99225,"line_start":271,"line_end":271,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":99226,"byte_end":99229,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ Otherwise, encoding will happen twice: once to determine the size of the chunks and once again","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":99230,"byte_end":99328,"line_start":273,"line_end":273,"column_start":1,"column_end":99}},{"value":"/ to actually write down the file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":99329,"byte_end":99365,"line_start":274,"line_end":274,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":431},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":102055,"byte_end":102064,"line_start":356,"line_end":356,"column_start":8,"column_end":17},"name":"write_std","qualname":"::smf::write_std","value":"pub fn write_std<'a, T, E, W>(&Header, T, W) -> io::Result<()> where\nT: IntoIterator<Item = E>, T::IntoIter: ExactSizeIterator + Clone + Send,\nE: IntoIterator<Item = &'a TrackEvent>, E::IntoIter: Clone + Send,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Similar to [`write`](fn.write.html), but writes to a `std::io::Write` writer instead of a\n `midly::io::Write` writer.","sig":null,"attributes":[{"value":"/ Similar to [`write`](fn.write.html), but writes to a `std::io::Write` writer instead of a","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":101817,"byte_end":101910,"line_start":350,"line_end":350,"column_start":1,"column_end":94}},{"value":"/ `midly::io::Write` writer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":101911,"byte_end":101941,"line_start":351,"line_end":351,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":101942,"byte_end":101945,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ This function is only available with the `std` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":101946,"byte_end":102013,"line_start":353,"line_end":353,"column_start":1,"column_end":68}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":102014,"byte_end":102037,"line_start":354,"line_end":354,"column_start":1,"column_end":24}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":102038,"byte_end":102047,"line_start":355,"line_end":355,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1659},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":108567,"byte_end":108573,"line_start":541,"line_end":541,"column_start":12,"column_end":18},"name":"Header","qualname":"::smf::Header","value":"Header { format, timing }","parent":null,"children":[{"krate":0,"index":1660},{"krate":0,"index":1661}],"decl_id":null,"docs":" A MIDI file header, indicating metadata about the file.\n","sig":null,"attributes":[{"value":"/ A MIDI file header, indicating metadata about the file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":108445,"byte_end":108504,"line_start":539,"line_end":539,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1660},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":108668,"byte_end":108674,"line_start":543,"line_end":543,"column_start":9,"column_end":15},"name":"format","qualname":"::smf::Header::format","value":"primitive::Format","parent":{"krate":0,"index":1659},"children":[],"decl_id":null,"docs":" Information about how should the tracks be laid out when playing them back.\n","sig":null,"attributes":[{"value":"/ Information about how should the tracks be laid out when playing them back.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":108580,"byte_end":108659,"line_start":542,"line_end":542,"column_start":5,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":1661},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":108995,"byte_end":109001,"line_start":549,"line_end":549,"column_start":9,"column_end":15},"name":"timing","qualname":"::smf::Header::timing","value":"primitive::Timing","parent":{"krate":0,"index":1659},"children":[],"decl_id":null,"docs":" Tempo information about the file.","sig":null,"attributes":[{"value":"/ Tempo information about the file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":108688,"byte_end":108725,"line_start":544,"line_end":544,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":108730,"byte_end":108733,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ Usually it's not possible to determine the timing of a file with just this field, the first","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":108738,"byte_end":108833,"line_start":546,"line_end":546,"column_start":5,"column_end":100}},{"value":"/ few events of the first track must be parsed in the best case, and in the worst case the","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":108838,"byte_end":108930,"line_start":547,"line_end":547,"column_start":5,"column_end":97}},{"value":"/ file might have changing tempos along the song.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":108935,"byte_end":108986,"line_start":548,"line_end":548,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":109100,"byte_end":109103,"line_start":554,"line_end":554,"column_start":12,"column_end":15},"name":"new","qualname":"<Header>::new","value":"pub fn new(Format, Timing) -> Header","parent":null,"children":[],"decl_id":null,"docs":" Create a new header from its raw parts.\n","sig":null,"attributes":[{"value":"/ Create a new header from its raw parts.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":109031,"byte_end":109074,"line_start":552,"line_end":552,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":109079,"byte_end":109088,"line_start":553,"line_end":553,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1677},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110056,"byte_end":110065,"line_start":579,"line_end":579,"column_start":12,"column_end":21},"name":"TrackIter","qualname":"::smf::TrackIter","value":"TrackIter {  }","parent":null,"children":[{"krate":0,"index":1679},{"krate":0,"index":1680}],"decl_id":null,"docs":" An iterator over all *tracks* in a Standard Midi File.\n Created by the [`parse`](fn.parse.html) function.","sig":null,"attributes":[{"value":"/ An iterator over all *tracks* in a Standard Midi File.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":109838,"byte_end":109896,"line_start":574,"line_end":574,"column_start":1,"column_end":59}},{"value":"/ Created by the [`parse`](fn.parse.html) function.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":109897,"byte_end":109950,"line_start":575,"line_end":575,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":109951,"byte_end":109954,"line_start":576,"line_end":576,"column_start":1,"column_end":4}},{"value":"/ This type is always available, even in `no_std` environments.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":109955,"byte_end":110020,"line_start":577,"line_end":577,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110359,"byte_end":110362,"line_start":588,"line_end":588,"column_start":12,"column_end":15},"name":"new","qualname":"<TrackIter>::new","value":"pub fn new(&[u8]) -> TrackIter","parent":null,"children":[],"decl_id":null,"docs":" Create an event iterator from raw SMF bytes, excluding the header.","sig":null,"attributes":[{"value":"/ Create an event iterator from raw SMF bytes, excluding the header.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110157,"byte_end":110227,"line_start":584,"line_end":584,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110232,"byte_end":110235,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ The main way to obtain raw SMF without a header is the [`unread`](#method.unread) method.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110240,"byte_end":110333,"line_start":586,"line_end":586,"column_start":5,"column_end":98}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110338,"byte_end":110347,"line_start":587,"line_end":587,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110584,"byte_end":110590,"line_start":597,"line_end":597,"column_start":12,"column_end":18},"name":"unread","qualname":"<TrackIter>::unread","value":"pub fn unread(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Peek at the remaining unparsed bytes in the file.\n","sig":null,"attributes":[{"value":"/ Peek at the remaining unparsed bytes in the file.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110505,"byte_end":110558,"line_start":595,"line_end":595,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110563,"byte_end":110572,"line_start":596,"line_end":596,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110846,"byte_end":110860,"line_start":605,"line_end":605,"column_start":12,"column_end":26},"name":"collect_tracks","qualname":"<TrackIter>::collect_tracks","value":"pub fn collect_tracks(Self) -> Result<Vec<Track>>","parent":null,"children":[],"decl_id":null,"docs":" Parse and collect the remaining unparsed tracks into a `Vec` of tracks.","sig":null,"attributes":[{"value":"/ Parse and collect the remaining unparsed tracks into a `Vec` of tracks.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110647,"byte_end":110722,"line_start":601,"line_end":601,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110727,"byte_end":110730,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ This function is only available with the `alloc` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110735,"byte_end":110804,"line_start":603,"line_end":603,"column_start":5,"column_end":74}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110809,"byte_end":110834,"line_start":604,"line_end":604,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":111228,"byte_end":111246,"line_start":614,"line_end":614,"column_start":12,"column_end":30},"name":"collect_bytemapped","qualname":"<TrackIter>::collect_bytemapped","value":"pub fn collect_bytemapped(Self) -> Result<Vec<BytemappedTrack>>","parent":null,"children":[],"decl_id":null,"docs":" Parse and collect the remaining unparsed tracks into a `Vec` of tracks, keeping a mapping\n to the original bytes that make up each event.","sig":null,"attributes":[{"value":"/ Parse and collect the remaining unparsed tracks into a `Vec` of tracks, keeping a mapping","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110956,"byte_end":111049,"line_start":609,"line_end":609,"column_start":5,"column_end":98}},{"value":"/ to the original bytes that make up each event.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":111054,"byte_end":111104,"line_start":610,"line_end":610,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":111109,"byte_end":111112,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ This function is only available with the `alloc` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":111117,"byte_end":111186,"line_start":612,"line_end":612,"column_start":5,"column_end":74}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":111191,"byte_end":111216,"line_start":613,"line_end":613,"column_start":5,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":492},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":113642,"byte_end":113647,"line_start":685,"line_end":685,"column_start":10,"column_end":15},"name":"Event","qualname":"::smf::EventKind::Event","value":"type Event: 'a;","parent":{"krate":0,"index":490},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1705},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116461,"byte_end":116470,"line_start":780,"line_end":780,"column_start":12,"column_end":21},"name":"EventIter","qualname":"::smf::EventIter","value":"EventIter {  }","parent":null,"children":[{"krate":0,"index":1707}],"decl_id":null,"docs":" An iterator over the events of a single track.\n Yielded by the [`TrackIter`](struct.TrackIter.html) iterator.","sig":null,"attributes":[{"value":"/ An iterator over the events of a single track.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116104,"byte_end":116154,"line_start":772,"line_end":772,"column_start":1,"column_end":51}},{"value":"/ Yielded by the [`TrackIter`](struct.TrackIter.html) iterator.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116155,"byte_end":116220,"line_start":773,"line_end":773,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116221,"byte_end":116224,"line_start":774,"line_end":774,"column_start":1,"column_end":4}},{"value":"/ This iterator is lazy, it parses events as it goes, and therefore produces `Result<TrackEvent>>`","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116225,"byte_end":116325,"line_start":775,"line_end":775,"column_start":1,"column_end":101}},{"value":"/ rather than `TrackEvent`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116326,"byte_end":116355,"line_start":776,"line_end":776,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116356,"byte_end":116359,"line_start":777,"line_end":777,"column_start":1,"column_end":4}},{"value":"/ This type is always available, even in `no_std` environments.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116360,"byte_end":116425,"line_start":778,"line_end":778,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117021,"byte_end":117024,"line_start":797,"line_end":797,"column_start":12,"column_end":15},"name":"new","qualname":"<EventIter>::new","value":"pub fn new(&[u8]) -> EventIter","parent":null,"children":[],"decl_id":null,"docs":" Create an event iterator from raw track bytes.","sig":null,"attributes":[{"value":"/ Create an event iterator from raw track bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116763,"byte_end":116813,"line_start":791,"line_end":791,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116818,"byte_end":116821,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ It can be hard to obtain raw track bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116826,"byte_end":116871,"line_start":793,"line_end":793,"column_start":5,"column_end":50}},{"value":"/ Usually these raw track bytes are obtained from the [`unread`](#method.unread) method on an","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116876,"byte_end":116971,"line_start":794,"line_end":794,"column_start":5,"column_end":100}},{"value":"/ event iterator.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116976,"byte_end":116995,"line_start":795,"line_end":795,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117000,"byte_end":117009,"line_start":796,"line_end":796,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117209,"byte_end":117215,"line_start":805,"line_end":805,"column_start":12,"column_end":18},"name":"unread","qualname":"<EventIter>::unread","value":"pub fn unread(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the remaining unparsed event bytes.\n","sig":null,"attributes":[{"value":"/ Get the remaining unparsed event bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117140,"byte_end":117183,"line_start":803,"line_end":803,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117188,"byte_end":117197,"line_start":804,"line_end":804,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117350,"byte_end":117364,"line_start":811,"line_end":811,"column_start":12,"column_end":26},"name":"running_status","qualname":"<EventIter>::running_status","value":"pub fn running_status(&Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get the current running status of the track.\n","sig":null,"attributes":[{"value":"/ Get the current running status of the track.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117276,"byte_end":117324,"line_start":809,"line_end":809,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117329,"byte_end":117338,"line_start":810,"line_end":810,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117512,"byte_end":117530,"line_start":817,"line_end":817,"column_start":12,"column_end":30},"name":"running_status_mut","qualname":"<EventIter>::running_status_mut","value":"pub fn running_status_mut(&mut Self) -> &mut Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Modify the current running status of the track.\n","sig":null,"attributes":[{"value":"/ Modify the current running status of the track.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117435,"byte_end":117486,"line_start":815,"line_end":815,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117491,"byte_end":117500,"line_start":816,"line_end":816,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117721,"byte_end":117731,"line_start":823,"line_end":823,"column_start":12,"column_end":22},"name":"bytemapped","qualname":"<EventIter>::bytemapped","value":"pub fn bytemapped(Self) -> EventBytemapIter","parent":null,"children":[],"decl_id":null,"docs":" Make this event iterator keep track of the raw bytes that make up each event.\n","sig":null,"attributes":[{"value":"/ Make this event iterator keep track of the raw bytes that make up each event.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117614,"byte_end":117695,"line_start":821,"line_end":821,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117700,"byte_end":117709,"line_start":822,"line_end":822,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118362,"byte_end":118370,"line_start":841,"line_end":841,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<EventIter>::into_vec","value":"pub fn into_vec(Self) -> Result<Track>","parent":null,"children":[],"decl_id":null,"docs":" Collects the remaining unparsed events into a `Track`.","sig":null,"attributes":[{"value":"/ Collects the remaining unparsed events into a `Track`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":117997,"byte_end":118055,"line_start":833,"line_end":833,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118060,"byte_end":118063,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ This function is a smarter version of `Iterator::collect`, as it guesses allocations and","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118068,"byte_end":118160,"line_start":835,"line_end":835,"column_start":5,"column_end":97}},{"value":"/ is usually optimized better than its naive counterpart.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118165,"byte_end":118224,"line_start":836,"line_end":836,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118229,"byte_end":118232,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ This function is only available with the `alloc` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118237,"byte_end":118306,"line_start":838,"line_end":838,"column_start":5,"column_end":74}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118311,"byte_end":118336,"line_start":839,"line_end":839,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118341,"byte_end":118350,"line_start":840,"line_end":840,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1714},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119082,"byte_end":119098,"line_start":862,"line_end":862,"column_start":12,"column_end":28},"name":"EventBytemapIter","qualname":"::smf::EventBytemapIter","value":"EventBytemapIter {  }","parent":null,"children":[{"krate":0,"index":1716}],"decl_id":null,"docs":" An iterator over the events of a single track that keeps track of the raw bytes that make up\n each event.\n Created by the [`EventIter::bytemapped`](struct.EventIter.html#method.bytemapped) method.","sig":null,"attributes":[{"value":"/ An iterator over the events of a single track that keeps track of the raw bytes that make up","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118612,"byte_end":118708,"line_start":853,"line_end":853,"column_start":1,"column_end":97}},{"value":"/ each event.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118709,"byte_end":118724,"line_start":854,"line_end":854,"column_start":1,"column_end":16}},{"value":"/ Created by the [`EventIter::bytemapped`](struct.EventIter.html#method.bytemapped) method.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118725,"byte_end":118818,"line_start":855,"line_end":855,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118819,"byte_end":118822,"line_start":856,"line_end":856,"column_start":1,"column_end":4}},{"value":"/ This iterator is lazy, it parses events as it goes, and therefore produces","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118823,"byte_end":118901,"line_start":857,"line_end":857,"column_start":1,"column_end":79}},{"value":"/ `Result<(&[u8], TrackEvent)>>` rather than just `(&[u8], TrackEvent)`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118902,"byte_end":118976,"line_start":858,"line_end":858,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118977,"byte_end":118980,"line_start":859,"line_end":859,"column_start":1,"column_end":4}},{"value":"/ This type is always available, even in `no_std` environments.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118981,"byte_end":119046,"line_start":860,"line_end":860,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119680,"byte_end":119683,"line_start":879,"line_end":879,"column_start":12,"column_end":15},"name":"new","qualname":"<EventBytemapIter>::new","value":"pub fn new(&[u8]) -> EventBytemapIter","parent":null,"children":[],"decl_id":null,"docs":" Create an event iterator from raw track bytes.","sig":null,"attributes":[{"value":"/ Create an event iterator from raw track bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119422,"byte_end":119472,"line_start":873,"line_end":873,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119477,"byte_end":119480,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ It can be hard to obtain raw track bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119485,"byte_end":119530,"line_start":875,"line_end":875,"column_start":5,"column_end":50}},{"value":"/ Usually these raw track bytes are obtained from the [`unread`](#method.unread) method on an","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119535,"byte_end":119630,"line_start":876,"line_end":876,"column_start":5,"column_end":100}},{"value":"/ event iterator.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119635,"byte_end":119654,"line_start":877,"line_end":877,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119659,"byte_end":119668,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119882,"byte_end":119888,"line_start":887,"line_end":887,"column_start":12,"column_end":18},"name":"unread","qualname":"<EventBytemapIter>::unread","value":"pub fn unread(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the remaining unparsed event bytes.\n","sig":null,"attributes":[{"value":"/ Get the remaining unparsed event bytes.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119813,"byte_end":119856,"line_start":885,"line_end":885,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119861,"byte_end":119870,"line_start":886,"line_end":886,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120023,"byte_end":120037,"line_start":893,"line_end":893,"column_start":12,"column_end":26},"name":"running_status","qualname":"<EventBytemapIter>::running_status","value":"pub fn running_status(&Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get the current running status of the track.\n","sig":null,"attributes":[{"value":"/ Get the current running status of the track.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119949,"byte_end":119997,"line_start":891,"line_end":891,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120002,"byte_end":120011,"line_start":892,"line_end":892,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120185,"byte_end":120203,"line_start":899,"line_end":899,"column_start":12,"column_end":30},"name":"running_status_mut","qualname":"<EventBytemapIter>::running_status_mut","value":"pub fn running_status_mut(&mut Self) -> &mut Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Modify the current running status of the track.\n","sig":null,"attributes":[{"value":"/ Modify the current running status of the track.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120108,"byte_end":120159,"line_start":897,"line_end":897,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120164,"byte_end":120173,"line_start":898,"line_end":898,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120378,"byte_end":120392,"line_start":905,"line_end":905,"column_start":12,"column_end":26},"name":"not_bytemapped","qualname":"<EventBytemapIter>::not_bytemapped","value":"pub fn not_bytemapped(Self) -> EventIter","parent":null,"children":[],"decl_id":null,"docs":" Stop collecting bytemap information for any remaining events.\n","sig":null,"attributes":[{"value":"/ Stop collecting bytemap information for any remaining events.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120287,"byte_end":120352,"line_start":903,"line_end":903,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120357,"byte_end":120366,"line_start":904,"line_end":904,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":121028,"byte_end":121036,"line_start":923,"line_end":923,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<EventBytemapIter>::into_vec","value":"pub fn into_vec(Self) -> Result<Vec<(&'a [u8], TrackEvent)>>","parent":null,"children":[],"decl_id":null,"docs":" Collects the remaining unparsed events into a `Vec<(&[u8], TrackEvent)>`.","sig":null,"attributes":[{"value":"/ Collects the remaining unparsed events into a `Vec<(&[u8], TrackEvent)>`.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120644,"byte_end":120721,"line_start":915,"line_end":915,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120726,"byte_end":120729,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ This function is a smarter version of `Iterator::collect`, as it guesses allocations and","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120734,"byte_end":120826,"line_start":917,"line_end":917,"column_start":5,"column_end":97}},{"value":"/ is usually optimized better than its naive counterpart.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120831,"byte_end":120890,"line_start":918,"line_end":918,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120895,"byte_end":120898,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ This function is only available with the `alloc` feature enabled.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120903,"byte_end":120972,"line_start":920,"line_end":920,"column_start":5,"column_end":74}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":120977,"byte_end":121002,"line_start":921,"line_end":921,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":121007,"byte_end":121016,"line_start":922,"line_end":922,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":540},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":1723},{"krate":0,"index":1733},{"krate":0,"index":1730},{"krate":0,"index":1727},{"krate":0,"index":547},{"krate":0,"index":549},{"krate":0,"index":560},{"krate":0,"index":564},{"krate":0,"index":570},{"krate":0,"index":571}],"decl_id":null,"docs":" Provides support for the niche use case of reading MIDI events from a non-delimited stream.","sig":null,"attributes":[{"value":"/ Provides support for the niche use case of reading MIDI events from a non-delimited stream.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121319,"byte_end":121414,"line_start":1,"line_end":1,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121415,"byte_end":121418,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Low level drivers or embedded devices might have access to raw MIDI streams, which are just a","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121419,"byte_end":121516,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ stream of bytes that might arrive at any rate.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121517,"byte_end":121567,"line_start":4,"line_end":4,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121568,"byte_end":121571,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ For this use case, the `MidiStream` type is provided, which can receive streaming bytes and","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121572,"byte_end":121667,"line_start":6,"line_end":6,"column_start":1,"column_end":96}},{"value":"/ produces MIDI messages.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121668,"byte_end":121695,"line_start":7,"line_end":7,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121696,"byte_end":121699,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Handles all of the quirks specific to MIDI streams, including System Realtime messages embedded","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121700,"byte_end":121799,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ in the middle of another message.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121800,"byte_end":121837,"line_start":10,"line_end":10,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1723},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122118,"byte_end":122128,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"name":"MidiStream","qualname":"::stream::MidiStream","value":"MidiStream {  }","parent":null,"children":[{"krate":0,"index":1725},{"krate":0,"index":1726}],"decl_id":null,"docs":" A streaming raw MIDI parser.\n This parser takes raw MIDI, *not* `.midi` files!","sig":null,"attributes":[{"value":"/ A streaming raw MIDI parser.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121935,"byte_end":121967,"line_start":18,"line_end":18,"column_start":1,"column_end":33}},{"value":"/ This parser takes raw MIDI, *not* `.midi` files!","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":121968,"byte_end":122020,"line_start":19,"line_end":19,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122021,"byte_end":122024,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Read the module documentation for more info.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122025,"byte_end":122073,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122301,"byte_end":122304,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<MidiStream>::new","value":"pub fn new() -> MidiStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new clean midi stream with the default buffer size.\n","sig":null,"attributes":[{"value":"/ Create a new clean midi stream with the default buffer size.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122211,"byte_end":122275,"line_start":28,"line_end":28,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122280,"byte_end":122289,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122486,"byte_end":122497,"line_start":37,"line_end":37,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<MidiStream<B>>::with_buffer","value":"pub fn with_buffer(B) -> MidiStream<B>","parent":null,"children":[],"decl_id":null,"docs":" Create a new clean midi stream using the given data buffer.\n","sig":null,"attributes":[{"value":"/ Create a new clean midi stream using the given data buffer.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122397,"byte_end":122460,"line_start":35,"line_end":35,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122465,"byte_end":122474,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":125880,"byte_end":125884,"line_start":113,"line_end":113,"column_start":12,"column_end":16},"name":"feed","qualname":"<MidiStream<B>>::feed","value":"pub fn feed<impl FnMut(LiveEvent): FnMut(LiveEvent) ->\n            ()>(&mut Self, &[u8], impl FnMut(LiveEvent))","parent":null,"children":[],"decl_id":null,"docs":" Feeds a slice of bytes to the stream, calling the `handle_ev` closure whenever a complete\n event is read.","sig":null,"attributes":[{"value":"/ Feeds a slice of bytes to the stream, calling the `handle_ev` closure whenever a complete","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":125474,"byte_end":125567,"line_start":105,"line_end":105,"column_start":5,"column_end":98}},{"value":"/ event is read.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":125572,"byte_end":125590,"line_start":106,"line_end":106,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":125595,"byte_end":125598,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ Calling `feed` with many small slices is equivalent to calling `feed` with one large","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":125603,"byte_end":125691,"line_start":108,"line_end":108,"column_start":5,"column_end":93}},{"value":"/ concatenation of them all.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":125696,"byte_end":125726,"line_start":109,"line_end":109,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":125731,"byte_end":125734,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Note that some calls to `feed` might produce no events, and others may produce as many as","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":125739,"byte_end":125832,"line_start":111,"line_end":111,"column_start":5,"column_end":98}},{"value":"/ the amount of bytes fed in.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":125837,"byte_end":125868,"line_start":112,"line_end":112,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126242,"byte_end":126247,"line_start":122,"line_end":122,"column_start":12,"column_end":17},"name":"flush","qualname":"<MidiStream<B>>::flush","value":"pub fn flush<impl FnMut(LiveEvent): FnMut(LiveEvent) ->\n             ()>(&mut Self, impl FnMut(LiveEvent))","parent":null,"children":[],"decl_id":null,"docs":" Indicates to the stream that this is an event boundary, such as for example when the stream\n is closed.\n Not calling this function might drop some pending events.\n","sig":null,"attributes":[{"value":"/ Indicates to the stream that this is an event boundary, such as for example when the stream","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126050,"byte_end":126145,"line_start":119,"line_end":119,"column_start":5,"column_end":100}},{"value":"/ is closed.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126150,"byte_end":126164,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/ Not calling this function might drop some pending events.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126169,"byte_end":126230,"line_start":121,"line_end":121,"column_start":5,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":560},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126751,"byte_end":126757,"line_start":136,"line_end":136,"column_start":11,"column_end":17},"name":"Buffer","qualname":"::stream::Buffer","value":"Buffer","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"decl_id":null,"docs":" Describes types that can be used as data buffers for the [`MidiStream`](struct.MidiStream.html)\n type.","sig":null,"attributes":[{"value":"/ Describes types that can be used as data buffers for the [`MidiStream`](struct.MidiStream.html)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126471,"byte_end":126570,"line_start":131,"line_end":131,"column_start":1,"column_end":100}},{"value":"/ type.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126571,"byte_end":126580,"line_start":132,"line_end":132,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126581,"byte_end":126584,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ This trait is automatically implemented by the [`stack_buffer!`](../macro.stack_buffer.html)","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126585,"byte_end":126681,"line_start":134,"line_end":134,"column_start":1,"column_end":97}},{"value":"/ macro, and very rarely should be implemented manually.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126682,"byte_end":126740,"line_start":135,"line_end":135,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126767,"byte_end":126771,"line_start":137,"line_end":137,"column_start":8,"column_end":12},"name":"push","qualname":"::stream::Buffer::push","value":"pub fn push(&mut Self, &[u7]) -> StdResult<(), ()>","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126825,"byte_end":126830,"line_start":138,"line_end":138,"column_start":8,"column_end":13},"name":"clear","qualname":"::stream::Buffer::clear","value":"pub fn clear(&mut Self)","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126850,"byte_end":126858,"line_start":139,"line_end":139,"column_start":8,"column_end":16},"name":"as_slice","qualname":"::stream::Buffer::as_slice","value":"pub fn as_slice(&Self) -> &[u7]","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1736},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131397,"byte_end":131410,"line_start":293,"line_end":293,"column_start":20,"column_end":33},"name":"DefaultBuffer","qualname":"::stream::default_buf_impl::DefaultBuffer","value":"DefaultBuffer {  }","parent":null,"children":[{"krate":0,"index":1737}],"decl_id":null,"docs":" The default buffer type used for [`MidiStream`](struct.MidiStream.html).\n By default it will have a reasonable maximum capacity, but the `Buffer` trait can be\n implemented for fine-grained control.","sig":null,"attributes":[{"value":"/ The default buffer type used for [`MidiStream`](struct.MidiStream.html).","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":130537,"byte_end":130613,"line_start":270,"line_end":270,"column_start":9,"column_end":85}},{"value":"/ By default it will have a reasonable maximum capacity, but the `Buffer` trait can be","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":130622,"byte_end":130710,"line_start":271,"line_end":271,"column_start":9,"column_end":97}},{"value":"/ implemented for fine-grained control.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":130719,"byte_end":130760,"line_start":272,"line_end":272,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":130769,"byte_end":130772,"line_start":273,"line_end":273,"column_start":9,"column_end":12}},{"value":"/ # Implementation notes","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":130781,"byte_end":130807,"line_start":274,"line_end":274,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":130816,"byte_end":130819,"line_start":275,"line_end":275,"column_start":9,"column_end":12}},{"value":"/ Currently, when the `alloc` feature is used a `Vec` is used for the backing allocation,","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":130828,"byte_end":130919,"line_start":276,"line_end":276,"column_start":9,"column_end":100}},{"value":"/ limited to a maximum of 256KB.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":130928,"byte_end":130962,"line_start":277,"line_end":277,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":130971,"byte_end":130974,"line_start":278,"line_end":278,"column_start":9,"column_end":12}},{"value":"/ When the `alloc` feature is disabled a 16KB stack buffer is used instead.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":130983,"byte_end":131060,"line_start":279,"line_end":279,"column_start":9,"column_end":86}},{"value":"/","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131069,"byte_end":131072,"line_start":280,"line_end":280,"column_start":9,"column_end":12}},{"value":"/ This implementation is subject to change at any time, including reductions in size.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131081,"byte_end":131168,"line_start":281,"line_end":281,"column_start":9,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131889,"byte_end":131896,"line_start":311,"line_end":311,"column_start":22,"column_end":29},"name":"max_cap","qualname":"<DefaultBuffer>::max_cap","value":"pub const fn max_cap(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131858,"byte_end":131867,"line_start":310,"line_end":310,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131990,"byte_end":131993,"line_start":315,"line_end":315,"column_start":22,"column_end":25},"name":"new","qualname":"<DefaultBuffer>::new","value":"pub const fn new() -> DefaultBuffer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131959,"byte_end":131968,"line_start":314,"line_end":314,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":614},"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":7056,"byte_end":7059,"line_start":235,"line_end":235,"column_start":9,"column_end":12},"name":"num","qualname":"::num","value":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621}],"decl_id":null,"docs":" Exotically-sized integers used by the MIDI standard.\n","sig":null,"attributes":[{"value":"/ Exotically-sized integers used by the MIDI standard.","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6991,"byte_end":7047,"line_start":234,"line_end":234,"column_start":1,"column_end":57}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":7475,"byte_end":7480,"line_start":14,"line_end":14,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":8000,"byte_end":8005,"line_start":34,"line_end":34,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9699,"byte_end":9704,"line_start":92,"line_end":92,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10382,"byte_end":10387,"line_start":116,"line_end":116,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10534,"byte_end":10539,"line_start":122,"line_end":122,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10928,"byte_end":10933,"line_start":135,"line_end":135,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12274,"byte_end":12283,"line_start":173,"line_end":173,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12589,"byte_end":12598,"line_start":183,"line_end":183,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":13298,"byte_end":13307,"line_start":209,"line_end":209,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":13485,"byte_end":13494,"line_start":215,"line_end":215,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15466,"byte_end":15471,"line_start":53,"line_end":53,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":19286,"byte_end":19291,"line_start":145,"line_end":145,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":19615,"byte_end":19620,"line_start":154,"line_end":154,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":19644,"byte_end":19649,"line_start":155,"line_end":155,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":20695,"byte_end":20705,"line_start":19,"line_end":19,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":23099,"byte_end":23113,"line_start":81,"line_end":81,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":29746,"byte_end":29757,"line_start":253,"line_end":253,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34131,"byte_end":34140,"line_start":360,"line_end":360,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37537,"byte_end":37548,"line_start":462,"line_end":462,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43697,"byte_end":43708,"line_start":55,"line_end":55,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43783,"byte_end":43794,"line_start":60,"line_end":60,"column_start":18,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43809,"byte_end":43820,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43936,"byte_end":43947,"line_start":68,"line_end":68,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":44238,"byte_end":44249,"line_start":81,"line_end":81,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":44933,"byte_end":44936,"line_start":110,"line_end":110,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":45357,"byte_end":45360,"line_start":128,"line_end":128,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":45954,"byte_end":45960,"line_start":151,"line_end":151,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":48280,"byte_end":48286,"line_start":240,"line_end":240,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":49280,"byte_end":49286,"line_start":269,"line_end":269,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":50877,"byte_end":50883,"line_start":321,"line_end":321,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":51548,"byte_end":51560,"line_start":341,"line_end":341,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":52034,"byte_end":52046,"line_start":358,"line_end":358,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":52585,"byte_end":52597,"line_start":374,"line_end":374,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54527,"byte_end":54536,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":61014,"byte_end":61026,"line_start":194,"line_end":194,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63981,"byte_end":64003,"line_start":279,"line_end":279,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65412,"byte_end":65426,"line_start":326,"line_end":326,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":76133,"byte_end":76136,"line_start":261,"line_end":261,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":76687,"byte_end":76690,"line_start":279,"line_end":279,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":77805,"byte_end":77808,"line_start":311,"line_end":311,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80271,"byte_end":80277,"line_start":382,"line_end":382,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":81431,"byte_end":81437,"line_start":416,"line_end":416,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82783,"byte_end":82792,"line_start":462,"line_end":462,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85383,"byte_end":85386,"line_start":571,"line_end":571,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/riff.rs","byte_start":87109,"byte_end":87118,"line_start":8,"line_end":8,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91347,"byte_end":91350,"line_start":69,"line_end":69,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":397},{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94533,"byte_end":94543,"line_start":149,"line_end":149,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":412},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":102493,"byte_end":102502,"line_start":372,"line_end":372,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":102792,"byte_end":102801,"line_start":386,"line_end":386,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":103543,"byte_end":103548,"line_start":410,"line_end":410,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":459},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":109018,"byte_end":109024,"line_start":551,"line_end":551,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110137,"byte_end":110146,"line_start":583,"line_end":583,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":112200,"byte_end":112209,"line_start":642,"line_end":642,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":113912,"byte_end":113928,"line_start":695,"line_end":695,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":115474,"byte_end":115490,"line_start":750,"line_end":750,"column_start":41,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116545,"byte_end":116554,"line_start":783,"line_end":783,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116743,"byte_end":116752,"line_start":790,"line_end":790,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118460,"byte_end":118469,"line_start":845,"line_end":845,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119173,"byte_end":119189,"line_start":865,"line_end":865,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119395,"byte_end":119411,"line_start":872,"line_end":872,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":121148,"byte_end":121164,"line_start":927,"line_end":927,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122194,"byte_end":122204,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122377,"byte_end":122387,"line_start":34,"line_end":34,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126971,"byte_end":126974,"line_start":144,"line_end":144,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131480,"byte_end":131493,"line_start":298,"line_end":298,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131791,"byte_end":131804,"line_start":308,"line_end":308,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":132097,"byte_end":132110,"line_start":319,"line_end":319,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6491,"byte_end":6493,"line_start":213,"line_end":213,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":167}},{"kind":"Mod","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6503,"byte_end":6507,"line_start":214,"line_end":214,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":271}},{"kind":"Mod","span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/lib.rs","byte_start":6551,"byte_end":6557,"line_start":218,"line_end":218,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":540}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":7475,"byte_end":7480,"line_start":14,"line_end":14,"column_start":23,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":629},"to":{"krate":0,"index":31}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":8000,"byte_end":8005,"line_start":34,"line_end":34,"column_start":39,"column_end":44},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":629},"to":{"krate":2,"index":1997}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":9699,"byte_end":9704,"line_start":92,"line_end":92,"column_start":6,"column_end":11},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10382,"byte_end":10387,"line_start":116,"line_end":116,"column_start":23,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":629},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10534,"byte_end":10539,"line_start":122,"line_end":122,"column_start":21,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":629},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":10928,"byte_end":10933,"line_start":135,"line_end":135,"column_start":28,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":629},"to":{"krate":1,"index":1750}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12274,"byte_end":12283,"line_start":173,"line_end":173,"column_start":6,"column_end":15},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":12589,"byte_end":12598,"line_start":183,"line_end":183,"column_start":23,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":13298,"byte_end":13307,"line_start":209,"line_end":209,"column_start":26,"column_end":35},"kind":{"Impl":{"id":8}},"from":{"krate":2,"index":34810},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/error.rs","byte_start":13485,"byte_end":13494,"line_start":215,"line_end":215,"column_start":26,"column_end":35},"kind":{"Impl":{"id":9}},"from":{"krate":2,"index":34810},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":15466,"byte_end":15471,"line_start":53,"line_end":53,"column_start":6,"column_end":11},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":645},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":19286,"byte_end":19291,"line_start":145,"line_end":145,"column_start":15,"column_end":20},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":645},"to":{"krate":2,"index":2305}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":19615,"byte_end":19620,"line_start":154,"line_end":154,"column_start":22,"column_end":27},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":645},"to":{"krate":2,"index":2081}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/arena.rs","byte_start":19644,"byte_end":19649,"line_start":155,"line_end":155,"column_start":21,"column_end":26},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":645},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":20695,"byte_end":20705,"line_start":19,"line_end":19,"column_start":10,"column_end":20},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":649},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":23099,"byte_end":23113,"line_start":81,"line_end":81,"column_start":10,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":29746,"byte_end":29757,"line_start":253,"line_end":253,"column_start":6,"column_end":17},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":724},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":34131,"byte_end":34140,"line_start":360,"line_end":360,"column_start":6,"column_end":15},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/event.rs","byte_start":37537,"byte_end":37548,"line_start":462,"line_end":462,"column_start":10,"column_end":21},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43116,"byte_end":43121,"line_start":37,"line_end":37,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":171},"to":{"krate":0,"index":177}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43697,"byte_end":43708,"line_start":55,"line_end":55,"column_start":19,"column_end":30},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":873},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43783,"byte_end":43794,"line_start":60,"line_end":60,"column_start":18,"column_end":29},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":873},"to":{"krate":2,"index":2091}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43809,"byte_end":43820,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":43936,"byte_end":43947,"line_start":68,"line_end":68,"column_start":26,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":873},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":44238,"byte_end":44249,"line_start":81,"line_end":81,"column_start":25,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":873},"to":{"krate":0,"index":177}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":44933,"byte_end":44936,"line_start":110,"line_end":110,"column_start":16,"column_end":19},"kind":{"Impl":{"id":24}},"from":{"krate":5,"index":5357},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":45357,"byte_end":45360,"line_start":128,"line_end":128,"column_start":15,"column_end":18},"kind":{"Impl":{"id":25}},"from":{"krate":5,"index":5357},"to":{"krate":0,"index":177}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":45954,"byte_end":45960,"line_start":151,"line_end":151,"column_start":10,"column_end":16},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":48280,"byte_end":48286,"line_start":240,"line_end":240,"column_start":20,"column_end":26},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":880},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":49280,"byte_end":49286,"line_start":269,"line_end":269,"column_start":19,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":880},"to":{"krate":0,"index":177}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":50877,"byte_end":50883,"line_start":321,"line_end":321,"column_start":30,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":897},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":51548,"byte_end":51560,"line_start":341,"line_end":341,"column_start":41,"column_end":53},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":910},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":52034,"byte_end":52046,"line_start":358,"line_end":358,"column_start":40,"column_end":52},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":910},"to":{"krate":0,"index":177}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/io.rs","byte_start":52585,"byte_end":52597,"line_start":374,"line_end":374,"column_start":16,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":263},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":54527,"byte_end":54536,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":61014,"byte_end":61026,"line_start":194,"line_end":194,"column_start":10,"column_end":22},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":958},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":63981,"byte_end":64003,"line_start":279,"line_end":279,"column_start":6,"column_end":28},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1003},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/live.rs","byte_start":65412,"byte_end":65426,"line_start":326,"line_end":326,"column_start":6,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":66518,"byte_end":66523,"line_start":7,"line_end":7,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2086},"to":{"krate":0,"index":311}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":66991,"byte_end":66996,"line_start":24,"line_end":24,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2086},"to":{"krate":0,"index":316}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":67273,"byte_end":67278,"line_start":30,"line_end":30,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":2086},"to":{"krate":0,"index":318}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":76133,"byte_end":76136,"line_start":261,"line_end":261,"column_start":18,"column_end":21},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1388},"to":{"krate":0,"index":316}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":76687,"byte_end":76690,"line_start":279,"line_end":279,"column_start":25,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1442},"to":{"krate":0,"index":318}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":77805,"byte_end":77808,"line_start":311,"line_end":311,"column_start":6,"column_end":9},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":80271,"byte_end":80277,"line_start":382,"line_end":382,"column_start":6,"column_end":12},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":81431,"byte_end":81437,"line_start":416,"line_end":416,"column_start":6,"column_end":12},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":82783,"byte_end":82792,"line_start":462,"line_end":462,"column_start":6,"column_end":15},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/primitive.rs","byte_start":85383,"byte_end":85386,"line_start":571,"line_end":571,"column_start":6,"column_end":9},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/riff.rs","byte_start":87109,"byte_end":87118,"line_start":8,"line_end":8,"column_start":23,"column_end":32},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":365},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":91347,"byte_end":91350,"line_start":69,"line_end":69,"column_start":10,"column_end":13},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":94533,"byte_end":94543,"line_start":149,"line_end":149,"column_start":10,"column_end":20},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1599},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":102493,"byte_end":102502,"line_start":372,"line_end":372,"column_start":10,"column_end":19},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":102792,"byte_end":102801,"line_start":386,"line_end":386,"column_start":23,"column_end":32},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1630},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":103543,"byte_end":103548,"line_start":410,"line_end":410,"column_start":10,"column_end":15},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":109018,"byte_end":109024,"line_start":551,"line_end":551,"column_start":6,"column_end":12},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":110137,"byte_end":110146,"line_start":583,"line_end":583,"column_start":10,"column_end":19},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":112200,"byte_end":112209,"line_start":642,"line_end":642,"column_start":23,"column_end":32},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1677},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":113912,"byte_end":113928,"line_start":695,"line_end":695,"column_start":28,"column_end":44},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":115474,"byte_end":115490,"line_start":750,"line_end":750,"column_start":41,"column_end":57},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1689},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116545,"byte_end":116554,"line_start":783,"line_end":783,"column_start":28,"column_end":37},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1705},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":116743,"byte_end":116752,"line_start":790,"line_end":790,"column_start":10,"column_end":19},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":118460,"byte_end":118469,"line_start":845,"line_end":845,"column_start":23,"column_end":32},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1705},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119173,"byte_end":119189,"line_start":865,"line_end":865,"column_start":28,"column_end":44},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1714},"to":{"krate":0,"index":490}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":119395,"byte_end":119411,"line_start":872,"line_end":872,"column_start":10,"column_end":26},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1714},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/smf.rs","byte_start":121148,"byte_end":121164,"line_start":927,"line_end":927,"column_start":23,"column_end":39},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1714},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122194,"byte_end":122204,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1723},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":122377,"byte_end":122387,"line_start":34,"line_end":34,"column_start":17,"column_end":27},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1723},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":126971,"byte_end":126974,"line_start":144,"line_end":144,"column_start":17,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":5,"index":5357},"to":{"krate":0,"index":560}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131480,"byte_end":131493,"line_start":298,"line_end":298,"column_start":25,"column_end":38},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1736},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":131791,"byte_end":131804,"line_start":308,"line_end":308,"column_start":10,"column_end":23},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/jun/.cargo/registry/src/github.com-1ecc6299db9ec823/midly-0.5.1/src/stream.rs","byte_start":132097,"byte_end":132110,"line_start":319,"line_end":319,"column_start":21,"column_end":34},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1736},"to":{"krate":0,"index":560}}]}